{"version":3,"sources":["core/file_flag.js"],"names":["define","api_error","ErrorCode","ApiError","ActionType","FileFlag","[object Object]","flagStr","this","validFlagStrs","indexOf","EINVAL","flagCache","hasOwnProperty","isExclusive","THROW_EXCEPTION","isTruncating","TRUNCATE_FILE","NOP","isWriteable","isAppendable","CREATE_FILE"],"mappings":";;;;;;;AAAAA,QAAQ,eAAgB,SAAUC,GAC9B,aAEF,MAAMC,UAAEA,EAASC,SAAEA,GAAaF,EAEhC,IAAIG,GACJ,SAAWA,GAEPA,EAAWA,EAAgB,IAAI,GAAK,MAEpCA,EAAWA,EAA4B,gBAAI,GAAK,kBAEhDA,EAAWA,EAA0B,cAAI,GAAK,gBAE9CA,EAAWA,EAAwB,YAAI,GAAK,cARhD,CASGA,IAAeA,aAmBZC,EAMFC,YAAYC,GAER,GADAC,KAAKD,QAAUA,EACXF,EAASI,cAAcC,QAAQH,GAAW,EAC1C,MAAM,IAAIJ,EAASD,EAAUS,OAAQ,iBAAmBJ,GAShED,mBAAmBC,GAEf,OAAIF,EAASO,UAAUC,eAAeN,GAC3BF,EAASO,UAAUL,GAEvBF,EAASO,UAAUL,GAAW,IAAIF,EAASE,GAKtDD,gBACI,OAAOE,KAAKD,QAKhBD,aACI,OAAsC,IAA/BE,KAAKD,QAAQG,QAAQ,OAA8C,IAA/BF,KAAKD,QAAQG,QAAQ,KAKpEJ,cACI,OAAsC,IAA/BE,KAAKD,QAAQG,QAAQ,OAA8C,IAA/BF,KAAKD,QAAQG,QAAQ,OAA8C,IAA/BF,KAAKD,QAAQG,QAAQ,KAKxGJ,eACI,OAAsC,IAA/BE,KAAKD,QAAQG,QAAQ,KAKhCJ,eACI,OAAsC,IAA/BE,KAAKD,QAAQG,QAAQ,KAKhCJ,gBACI,OAAsC,IAA/BE,KAAKD,QAAQG,QAAQ,KAKhCJ,cACI,OAAsC,IAA/BE,KAAKD,QAAQG,QAAQ,KAMhCJ,mBACI,OAAIE,KAAKM,cACEV,EAAWW,gBAEbP,KAAKQ,eACHZ,EAAWa,cAGXb,EAAWc,IAO1BZ,sBACI,OAAKE,KAAKW,eAAiBX,KAAKY,iBAAoC,OAAjBZ,KAAKD,QAC7CH,EAAWiB,YAGXjB,EAAWW,iBAW5B,OANFV,EAASO,aAETP,EAASI,eAAiB,IAAK,KAAM,KAAM,MAAO,IAAK,KAAM,KAAM,MAAO,IAAK,KAAM,KAAM,QAKrFL,WAAYA,EACZC,SAAUA","file":"../../core/file_flag.js","sourcesContent":["define(['./api_error'], function (api_error) {\n    'use strict';\n\n  const { ErrorCode, ApiError } = api_error;\n\n  var ActionType;\n  (function (ActionType) {\n      // Indicates that the code should not do anything.\n      ActionType[ActionType[\"NOP\"] = 0] = \"NOP\";\n      // Indicates that the code should throw an exception.\n      ActionType[ActionType[\"THROW_EXCEPTION\"] = 1] = \"THROW_EXCEPTION\";\n      // Indicates that the code should truncate the file, but only if it is a file.\n      ActionType[ActionType[\"TRUNCATE_FILE\"] = 2] = \"TRUNCATE_FILE\";\n      // Indicates that the code should create the file.\n      ActionType[ActionType[\"CREATE_FILE\"] = 3] = \"CREATE_FILE\";\n  })(ActionType || (ActionType = {}));\n  /**\n   * Represents one of the following file flags. A convenience object.\n   *\n   * * `'r'` - Open file for reading. An exception occurs if the file does not exist.\n   * * `'r+'` - Open file for reading and writing. An exception occurs if the file does not exist.\n   * * `'rs'` - Open file for reading in synchronous mode. Instructs the filesystem to not cache writes.\n   * * `'rs+'` - Open file for reading and writing, and opens the file in synchronous mode.\n   * * `'w'` - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).\n   * * `'wx'` - Like 'w' but opens the file in exclusive mode.\n   * * `'w+'` - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).\n   * * `'wx+'` - Like 'w+' but opens the file in exclusive mode.\n   * * `'a'` - Open file for appending. The file is created if it does not exist.\n   * * `'ax'` - Like 'a' but opens the file in exclusive mode.\n   * * `'a+'` - Open file for reading and appending. The file is created if it does not exist.\n   * * `'ax+'` - Like 'a+' but opens the file in exclusive mode.\n   *\n   * Exclusive mode ensures that the file path is newly created.\n   */\n  class FileFlag {\n      /**\n       * This should never be called directly.\n       * @param modeStr The string representing the mode\n       * @throw when the mode string is invalid\n       */\n      constructor(flagStr) {\n          this.flagStr = flagStr;\n          if (FileFlag.validFlagStrs.indexOf(flagStr) < 0) {\n              throw new ApiError(ErrorCode.EINVAL, \"Invalid flag: \" + flagStr);\n          }\n      }\n      /**\n       * Get an object representing the given file flag.\n       * @param modeStr The string representing the flag\n       * @return The FileFlag object representing the flag\n       * @throw when the flag string is invalid\n       */\n      static getFileFlag(flagStr) {\n          // Check cache first.\n          if (FileFlag.flagCache.hasOwnProperty(flagStr)) {\n              return FileFlag.flagCache[flagStr];\n          }\n          return FileFlag.flagCache[flagStr] = new FileFlag(flagStr);\n      }\n      /**\n       * Get the underlying flag string for this flag.\n       */\n      getFlagString() {\n          return this.flagStr;\n      }\n      /**\n       * Returns true if the file is readable.\n       */\n      isReadable() {\n          return this.flagStr.indexOf('r') !== -1 || this.flagStr.indexOf('+') !== -1;\n      }\n      /**\n       * Returns true if the file is writeable.\n       */\n      isWriteable() {\n          return this.flagStr.indexOf('w') !== -1 || this.flagStr.indexOf('a') !== -1 || this.flagStr.indexOf('+') !== -1;\n      }\n      /**\n       * Returns true if the file mode should truncate.\n       */\n      isTruncating() {\n          return this.flagStr.indexOf('w') !== -1;\n      }\n      /**\n       * Returns true if the file is appendable.\n       */\n      isAppendable() {\n          return this.flagStr.indexOf('a') !== -1;\n      }\n      /**\n       * Returns true if the file is open in synchronous mode.\n       */\n      isSynchronous() {\n          return this.flagStr.indexOf('s') !== -1;\n      }\n      /**\n       * Returns true if the file is open in exclusive mode.\n       */\n      isExclusive() {\n          return this.flagStr.indexOf('x') !== -1;\n      }\n      /**\n       * Returns one of the static fields on this object that indicates the\n       * appropriate response to the path existing.\n       */\n      pathExistsAction() {\n          if (this.isExclusive()) {\n              return ActionType.THROW_EXCEPTION;\n          }\n          else if (this.isTruncating()) {\n              return ActionType.TRUNCATE_FILE;\n          }\n          else {\n              return ActionType.NOP;\n          }\n      }\n      /**\n       * Returns one of the static fields on this object that indicates the\n       * appropriate response to the path not existing.\n       */\n      pathNotExistsAction() {\n          if ((this.isWriteable() || this.isAppendable()) && this.flagStr !== 'r+') {\n              return ActionType.CREATE_FILE;\n          }\n          else {\n              return ActionType.THROW_EXCEPTION;\n          }\n      }\n  }\n  // Contains cached FileMode instances.\n  FileFlag.flagCache = {};\n  // Array of valid mode strings.\n  FileFlag.validFlagStrs = ['r', 'r+', 'rs', 'rs+', 'w', 'wx', 'w+', 'wx+', 'a', 'ax', 'a+', 'ax+'];\n\n\n\n    return {\n        ActionType: ActionType,\n        FileFlag: FileFlag\n    };\n});"]}