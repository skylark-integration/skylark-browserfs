{"version":3,"sources":["core/api_error.js"],"names":["define","buffers","Buffer","ErrorCode","ErrorStrings","EPERM","ENOENT","EIO","EBADF","EACCES","EBUSY","EEXIST","ENOTDIR","EISDIR","EINVAL","EFBIG","ENOSPC","EROFS","ENOTEMPTY","ENOTSUP","ApiError","Error","[object Object]","type","message","path","super","this","syscall","errno","code","stack","json","err","buffer","i","fromJSON","JSON","parse","toString","readUInt32LE","p","FileError","alloc","bufferSize","bytesWritten","write","stringify","toJSON","writeUInt32LE","byteLength"],"mappings":"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","file":"../../core/api_error.js","sourcesContent":["define([\n  '../libs/buffers'\n],function (buffers) {\n    const { Buffer } = buffers;\n\n    /**\n     * Standard libc error codes. Add more to this enum and ErrorStrings as they are\n     * needed.\n     * @url http://www.gnu.org/software/libc/manual/html_node/Error-Codes.html\n     */\n    var ErrorCode;\n    (function (ErrorCode) {\n        ErrorCode[ErrorCode[\"EPERM\"] = 1] = \"EPERM\";\n        ErrorCode[ErrorCode[\"ENOENT\"] = 2] = \"ENOENT\";\n        ErrorCode[ErrorCode[\"EIO\"] = 5] = \"EIO\";\n        ErrorCode[ErrorCode[\"EBADF\"] = 9] = \"EBADF\";\n        ErrorCode[ErrorCode[\"EACCES\"] = 13] = \"EACCES\";\n        ErrorCode[ErrorCode[\"EBUSY\"] = 16] = \"EBUSY\";\n        ErrorCode[ErrorCode[\"EEXIST\"] = 17] = \"EEXIST\";\n        ErrorCode[ErrorCode[\"ENOTDIR\"] = 20] = \"ENOTDIR\";\n        ErrorCode[ErrorCode[\"EISDIR\"] = 21] = \"EISDIR\";\n        ErrorCode[ErrorCode[\"EINVAL\"] = 22] = \"EINVAL\";\n        ErrorCode[ErrorCode[\"EFBIG\"] = 27] = \"EFBIG\";\n        ErrorCode[ErrorCode[\"ENOSPC\"] = 28] = \"ENOSPC\";\n        ErrorCode[ErrorCode[\"EROFS\"] = 30] = \"EROFS\";\n        ErrorCode[ErrorCode[\"ENOTEMPTY\"] = 39] = \"ENOTEMPTY\";\n        ErrorCode[ErrorCode[\"ENOTSUP\"] = 95] = \"ENOTSUP\";\n    })(ErrorCode || (ErrorCode = {}));\n\n    /* tslint:disable:variable-name */\n    /**\n     * Strings associated with each error code.\n     * @hidden\n     */\n    const ErrorStrings = {};\n    ErrorStrings[ErrorCode.EPERM] = 'Operation not permitted.';\n    ErrorStrings[ErrorCode.ENOENT] = 'No such file or directory.';\n    ErrorStrings[ErrorCode.EIO] = 'Input/output error.';\n    ErrorStrings[ErrorCode.EBADF] = 'Bad file descriptor.';\n    ErrorStrings[ErrorCode.EACCES] = 'Permission denied.';\n    ErrorStrings[ErrorCode.EBUSY] = 'Resource busy or locked.';\n    ErrorStrings[ErrorCode.EEXIST] = 'File exists.';\n    ErrorStrings[ErrorCode.ENOTDIR] = 'File is not a directory.';\n    ErrorStrings[ErrorCode.EISDIR] = 'File is a directory.';\n    ErrorStrings[ErrorCode.EINVAL] = 'Invalid argument.';\n    ErrorStrings[ErrorCode.EFBIG] = 'File is too big.';\n    ErrorStrings[ErrorCode.ENOSPC] = 'No space left on disk.';\n    ErrorStrings[ErrorCode.EROFS] = 'Cannot modify a read-only file system.';\n    ErrorStrings[ErrorCode.ENOTEMPTY] = 'Directory is not empty.';\n    ErrorStrings[ErrorCode.ENOTSUP] = 'Operation is not supported.';\n\n    /* tslint:enable:variable-name */\n    /**\n     * Represents a BrowserFS error. Passed back to applications after a failed\n     * call to the BrowserFS API.\n     */\n    class ApiError extends Error {\n        /**\n         * Represents a BrowserFS error. Passed back to applications after a failed\n         * call to the BrowserFS API.\n         *\n         * Error codes mirror those returned by regular Unix file operations, which is\n         * what Node returns.\n         * @constructor ApiError\n         * @param type The type of the error.\n         * @param [message] A descriptive error message.\n         */\n        constructor(type, message = ErrorStrings[type], path) {\n            super(message);\n            // Unsupported.\n            this.syscall = \"\";\n            this.errno = type;\n            this.code = ErrorCode[type];\n            this.path = path;\n            this.stack = new Error().stack;\n            this.message = `Error: ${this.code}: ${message}${this.path ? `, '${this.path}'` : ''}`;\n        }\n        static fromJSON(json) {\n            const err = new ApiError(0);\n            err.errno = json.errno;\n            err.code = json.code;\n            err.path = json.path;\n            err.stack = json.stack;\n            err.message = json.message;\n            return err;\n        }\n        /**\n         * Creates an ApiError object from a buffer.\n         */\n        static fromBuffer(buffer, i = 0) {\n            return ApiError.fromJSON(JSON.parse(buffer.toString('utf8', i + 4, i + 4 + buffer.readUInt32LE(i))));\n        }\n        static FileError(code, p) {\n            return new ApiError(code, ErrorStrings[code], p);\n        }\n        static ENOENT(path) {\n            return this.FileError(ErrorCode.ENOENT, path);\n        }\n        static EEXIST(path) {\n            return this.FileError(ErrorCode.EEXIST, path);\n        }\n        static EISDIR(path) {\n            return this.FileError(ErrorCode.EISDIR, path);\n        }\n        static ENOTDIR(path) {\n            return this.FileError(ErrorCode.ENOTDIR, path);\n        }\n        static EPERM(path) {\n            return this.FileError(ErrorCode.EPERM, path);\n        }\n        static ENOTEMPTY(path) {\n            return this.FileError(ErrorCode.ENOTEMPTY, path);\n        }\n        /**\n         * @return A friendly error message.\n         */\n        toString() {\n            return this.message;\n        }\n        toJSON() {\n            return {\n                errno: this.errno,\n                code: this.code,\n                path: this.path,\n                stack: this.stack,\n                message: this.message\n            };\n        }\n        /**\n         * Writes the API error into a buffer.\n         */\n        writeToBuffer(buffer = Buffer.alloc(this.bufferSize()), i = 0) {\n            const bytesWritten = buffer.write(JSON.stringify(this.toJSON()), i + 4);\n            buffer.writeUInt32LE(bytesWritten, i);\n            return buffer;\n        }\n        /**\n         * The size of the API error in buffer-form in bytes.\n         */\n        bufferSize() {\n            // 4 bytes for string length.\n            return 4 + Buffer.byteLength(JSON.stringify(this.toJSON()));\n        }\n    }\n\n    return {\n        ApiError,\n        ErrorCode,\n        ErrorStrings\n    };\n});"]}