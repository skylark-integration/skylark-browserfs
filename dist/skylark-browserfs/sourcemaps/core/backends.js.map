{"version":3,"sources":["core/backends.js"],"names":["define","util","AsyncMirror","Dropbox","Emscripten","FolderAdapter","HTML5FS","InMemory","IndexedDB","LocalStorage","MountableFileSystem","OverlayFS","WorkerFS","HTTPRequest","ZipFS","IsoFS","checkOptions","forEach","fsType","create","Create","opts","cb","oneArg","normalizedCb","normalizedOpts","e","call","Backends","XmlHttpRequest"],"mappings":";;;;;;;AAAAA,QACI,SACA,yBACA,qBACA,wBACA,2BACA,qBACA,sBACA,uBACA,0BACA,iCACA,uBACA,sBACA,yBACA,mBACA,oBACD,SAAUC,EAAMC,EAAaC,EAASC,EAAYC,EAAeC,EAASC,EAAUC,EAAWC,EAAcC,EAAqBC,EAAWC,EAAUC,EAAaC,EAAOC,GAC1K,aACA,MAAMC,aAAEA,GAAiBf,GAKxBC,EAAaC,EAASC,EAAYC,EAAeC,EAASC,EAAUC,EAAWO,EAAON,EAAcC,EAAqBC,EAAWC,EAAUC,EAAaC,GAAOG,QAASC,IACxK,MAAMC,EAASD,EAAOE,OACtBF,EAAOE,OAAS,SAAUC,EAAMC,GAC5B,MAAMC,EAA2B,mBAAX,EAChBC,EAAeD,EAASF,EAAOC,EAC/BG,EAAiBF,KAAcF,EASrCL,EAAaE,EAAQO,EARrB,SAAmBC,GACXA,EACAF,EAAaE,GAGbP,EAAOQ,KAAKT,EAAQO,EAAgBD,QASpD,MAAMI,GAAa1B,YAAAA,EAAaC,QAAAA,EAASC,WAAAA,EAAYC,cAAAA,EAAeC,QAAAA,EAASC,SAAAA,EAAUC,UAAAA,EAAWO,MAAAA,EAAON,aAAAA,EAAcC,oBAAAA,EAAqBC,UAAAA,EAAWC,SAAAA,EAAUC,YAAAA,EAAagB,eAAgBhB,EAAaC,MAAAA,GAM3M,OAAOc","file":"../../core/backends.js","sourcesContent":["define([\n    './util',\n    '../backend/AsyncMirror',\n    '../backend/Dropbox',\n    '../backend/Emscripten',\n    '../backend/FolderAdapter',\n    '../backend/HTML5FS',\n    '../backend/InMemory',\n    '../backend/IndexedDB',\n    '../backend/LocalStorage',\n    '../backend/MountableFileSystem',\n    '../backend/OverlayFS',\n    '../backend/WorkerFS',\n    '../backend/HTTPRequest',\n    '../backend/ZipFS',\n    '../backend/IsoFS'\n], function (util, AsyncMirror, Dropbox, Emscripten, FolderAdapter, HTML5FS, InMemory, IndexedDB, LocalStorage, MountableFileSystem, OverlayFS, WorkerFS, HTTPRequest, ZipFS, IsoFS) {\n    'use strict';\n    const { checkOptions } = util;\n\n    \n\n    // Monkey-patch `Create` functions to check options before file system initialization.\n    [AsyncMirror, Dropbox, Emscripten, FolderAdapter, HTML5FS, InMemory, IndexedDB, IsoFS, LocalStorage, MountableFileSystem, OverlayFS, WorkerFS, HTTPRequest, ZipFS].forEach((fsType) => {\n        const create = fsType.Create;\n        fsType.Create = function (opts, cb) {\n            const oneArg = typeof (opts) === \"function\";\n            const normalizedCb = oneArg ? opts : cb;\n            const normalizedOpts = oneArg ? {} : opts;\n            function wrappedCb(e) {\n                if (e) {\n                    normalizedCb(e);\n                }\n                else {\n                    create.call(fsType, normalizedOpts, normalizedCb);\n                }\n            }\n            checkOptions(fsType, normalizedOpts, wrappedCb);\n        };\n    });\n    /**\n     * @hidden\n     */\n    const Backends = { AsyncMirror, Dropbox, Emscripten, FolderAdapter, HTML5FS, InMemory, IndexedDB, IsoFS, LocalStorage, MountableFileSystem, OverlayFS, WorkerFS, HTTPRequest, XmlHttpRequest: HTTPRequest, ZipFS };\n    // Make sure all backends cast to FileSystemConstructor (for type checking)\n    const _ = Backends;\n    // tslint:disable-next-line:no-unused-expression\n    _;\n    // tslint:enable-next-line:no-unused-expression\n    return Backends;\n});"]}