{"version":3,"sources":["core/browserfs.js"],"names":["define","skylark","process","buffers","fs","path","EmscriptenFS","Backends","BFSUtils","Errors","setImmediate","Buffer","BFSRequire","module","buffer","initialize","rootfs","getFileSystem","config","cb","fsName","ApiError","ErrorCode","EPERM","options","waitCount","called","finish","fsc","Create","finishedIterating","Object","keys","filter","k","forEach","p","d","e","attach","install","obj","oldRequire","require","arg","rv","apply","Array","prototype","slice","call","arguments","registerFileSystem","name","configure","FileSystem"],"mappings":";;;;;;;AAAAA,QACI,mBACA,kBACA,kBACA,YACA,eACA,2BACA,aACA,SACA,cACA,2BACD,SAAUC,EAAQC,EAAQC,EAASC,EAAIC,EAAMC,EAAcC,EAAUC,EAAUC,EAAQC,GACtF,aAEA,MAAMC,OAACA,GAAUR,EAkCjB,SAASS,EAAWC,QAChB,OAAQA,QACJ,IAAK,KACD,OAAOT,EACX,IAAK,OACD,OAAOC,EACX,IAAK,SAED,OAAOS,OACX,IAAK,UACD,OAAOZ,EACX,IAAK,YACD,OAAOM,EACX,QACI,OAAOD,EAASM,SAM5B,SAASE,EAAWC,GAChB,OAAOZ,EAAGW,WAAWC,GAsBzB,SAASC,EAAcC,EAAQC,GAC3B,MAAMC,EAASF,EAAW,GAC1B,IAAKE,EACD,OAAOD,EAAG,IAAIV,EAAOY,SAASZ,EAAOa,UAAUC,MAAO,mDAE1D,MAAMC,EAAUN,EAAgB,QAChC,IAAIO,EAAY,EACZC,GAAS,EACb,SAASC,IACL,IAAKD,EAAQ,CACTA,GAAS,EACT,MAAME,EAAMrB,EAASa,GAChBQ,EAIDA,EAAIC,OAAOL,EAASL,GAHpBA,EAAG,IAAIV,EAAOY,SAASZ,EAAOa,UAAUC,qBAAsBH,sCAO1E,GAAgB,OAAZI,GAAyC,iBAAd,EAAwB,CACnD,IAAIM,GAAoB,EACVC,OAAOC,KAAKR,GAASS,OAAQC,GAAY,OAANA,GAE3CC,QAASC,IACX,MAAMC,EAAIb,EAAQY,GACR,OAANC,GAA6B,iBAAR,GAAoBA,EAAM,KAC/CZ,IACAR,EAAcoB,EAAG,SAAUC,EAAGlC,GAE1B,GADAqB,IACIa,EAAG,CACH,GAAIZ,EACA,OAEJA,GAAS,EACTP,EAAGmB,QAGHd,EAAQY,GAAKhC,EACK,IAAdqB,GAAmBK,GACnBH,SAMpBG,GAAoB,EAEN,IAAdL,GACAE,IAIR,OA5HIzB,EAAwB,gBACxBA,EAAwB,iBA2HrBD,EAAQsC,OAAO,kBAClBC,QAtHJ,SAAiBC,GACbA,EAAI9B,OAASA,EACb8B,EAAIvC,QAAUA,EACd,MAAMwC,EAAaD,EAAIE,QAAUF,EAAIE,QAAU,KAE/CF,EAAIE,QAAU,SAAUC,GACpB,MAAMC,EAAKjC,EAAWgC,GACtB,OAAKC,GACMH,EAAWI,MAAM,KAAMC,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,MA+G5EC,mBArGJ,SAA4BC,EAAMjD,GAC9BG,EAAS8C,GAAQjD,GAqGjBQ,WAAYA,EACZG,WAAYA,EACZuC,UA1EJ,SAAmBpC,EAAQC,GACvBF,EAAcC,EAAQ,CAACoB,EAAGlC,KAClBA,GACAW,EAAWX,GACXe,KAGAA,EAAGmB,MAoEXrB,cAAeA,EACfX,aAAAA,EACAiD,WAAehD,EACfE,OAAAA,EACAC,aAAAA","file":"../../core/browserfs.js","sourcesContent":["define([\n    \"skylark-langx-ns\",\n    '../libs/process',\n    '../libs/buffers',\n    './node_fs',\n    '../libs/path',\n    '../generic/emscripten_fs',\n    './backends',\n    './util',\n    './api_error',\n    '../generic/setImmediate'\n], function (skylark,process,buffers, fs, path, EmscriptenFS, Backends, BFSUtils, Errors, setImmediate) {\n    'use strict';\n\n    const {Buffer} = buffers;\n    \n    /**\n     * BrowserFS's main module. This is exposed in the browser via the BrowserFS global.\n     * Due to limitations in typedoc, we document these functions in ./typedoc.ts.\n     */\n    if (process['initializeTTYs']) {\n        process['initializeTTYs']();\n    }\n    /**\n     * Installs BFSRequire as global `require`, a Node Buffer polyfill as the global `Buffer` variable,\n     * and a Node process polyfill as the global `process` variable.\n     */\n    function install(obj) {\n        obj.Buffer = Buffer;\n        obj.process = process;\n        const oldRequire = obj.require ? obj.require : null;\n        // Monkey-patch require for Node-style code.\n        obj.require = function (arg) {\n            const rv = BFSRequire(arg);\n            if (!rv) {\n                return oldRequire.apply(null, Array.prototype.slice.call(arguments, 0));\n            }\n            else {\n                return rv;\n            }\n        };\n    }\n    /**\n     * @hidden\n     */\n    function registerFileSystem(name, fs) {\n        Backends[name] = fs;\n    }\n    function BFSRequire(module) {\n        switch (module) {\n            case 'fs':\n                return fs;\n            case 'path':\n                return path;\n            case 'buffer':\n                // The 'buffer' module has 'Buffer' as a property.\n                return buffer;\n            case 'process':\n                return process;\n            case 'bfs_utils':\n                return BFSUtils;\n            default:\n                return Backends[module];\n        }\n    }\n    /**\n     * Initializes BrowserFS with the given root file system.\n     */\n    function initialize(rootfs) {\n        return fs.initialize(rootfs);\n    }\n    /**\n     * Creates a file system with the given configuration, and initializes BrowserFS with it.\n     * See the FileSystemConfiguration type for more info on the configuration object.\n     */\n    function configure(config, cb) {\n        getFileSystem(config, (e, fs) => {\n            if (fs) {\n                initialize(fs);\n                cb();\n            }\n            else {\n                cb(e);\n            }\n        });\n    }\n    /**\n     * Retrieve a file system with the given configuration.\n     * @param config A FileSystemConfiguration object. See FileSystemConfiguration for details.\n     * @param cb Called when the file system is constructed, or when an error occurs.\n     */\n    function getFileSystem(config, cb) {\n        const fsName = config['fs'];\n        if (!fsName) {\n            return cb(new Errors.ApiError(Errors.ErrorCode.EPERM, 'Missing \"fs\" property on configuration object.'));\n        }\n        const options = config['options'];\n        let waitCount = 0;\n        let called = false;\n        function finish() {\n            if (!called) {\n                called = true;\n                const fsc = Backends[fsName];\n                if (!fsc) {\n                    cb(new Errors.ApiError(Errors.ErrorCode.EPERM, `File system ${fsName} is not available in BrowserFS.`));\n                }\n                else {\n                    fsc.Create(options, cb);\n                }\n            }\n        }\n        if (options !== null && typeof (options) === \"object\") {\n            let finishedIterating = false;\n            const props = Object.keys(options).filter((k) => k !== 'fs');\n            // Check recursively if other fields have 'fs' properties.\n            props.forEach((p) => {\n                const d = options[p];\n                if (d !== null && typeof (d) === \"object\" && d['fs']) {\n                    waitCount++;\n                    getFileSystem(d, function (e, fs) {\n                        waitCount--;\n                        if (e) {\n                            if (called) {\n                                return;\n                            }\n                            called = true;\n                            cb(e);\n                        }\n                        else {\n                            options[p] = fs;\n                            if (waitCount === 0 && finishedIterating) {\n                                finish();\n                            }\n                        }\n                    });\n                }\n            });\n            finishedIterating = true;\n        }\n        if (waitCount === 0) {\n            finish();\n        }\n    }\n\n    return skylark.attach(\"intg.BrowserFS\",{\n        install: install,\n        registerFileSystem: registerFileSystem,\n        BFSRequire: BFSRequire,\n        initialize: initialize,\n        configure: configure,\n        getFileSystem: getFileSystem,\n        EmscriptenFS,\n        \"FileSystem\" : Backends,\n        Errors,\n        setImmediate\n    });\n});"]}