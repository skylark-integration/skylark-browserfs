{"version":3,"sources":["core/levenshtein.js"],"names":["define","_min","d0","d1","d2","bx","ay","a","b","length","tmp","la","lb","charCodeAt","offset","vector","Array","y","x","d3","bx0","bx1","bx2","bx3","dd","dy"],"mappings":";;;;;;;AAAAA,OAAO,WACH,aAMA,SAASC,EAAKC,EAAIC,EAAIC,EAAIC,EAAIC,GAC1B,OAAOJ,EAAKC,GAAMC,EAAKD,EAAKD,EAAKE,EAAKA,EAAK,EAAIF,EAAK,EAAIG,IAAOC,EAAKH,EAAKA,EAAK,EA2ElF,OAnEC,SAAqBI,EAAGC,GACrB,GAAID,IAAMC,EACN,OAAO,EAEX,GAAID,EAAEE,OAASD,EAAEC,OAAQ,CACrB,MAAMC,EAAMH,EACZA,EAAIC,EACJA,EAAIE,EAER,IAAIC,EAAKJ,EAAEE,OACPG,EAAKJ,EAAEC,OACX,KAAOE,EAAK,GAAKJ,EAAEM,WAAWF,EAAK,KAAOH,EAAEK,WAAWD,EAAK,IACxDD,IACAC,IAEJ,IAAIE,EAAS,EACb,KAAOA,EAASH,GAAMJ,EAAEM,WAAWC,KAAYN,EAAEK,WAAWC,IACxDA,IAIJ,GADAF,GAAME,EACK,IAFXH,GAAMG,IAEiB,IAAPF,EACZ,OAAOA,EAEX,MAAMG,EAAS,IAAIC,MAAML,GAAM,GAC/B,IAAK,IAAIM,EAAI,EAAGA,EAAIN,GAChBI,EAAOJ,EAAKM,GAAKV,EAAEM,WAAWC,EAASG,GACvCF,EAAOE,KAAOA,EAElB,IAAIC,EACAhB,EACAC,EACAC,EACAe,EACJ,IAAKD,EAAI,EAAGA,EAAI,EAAIN,GAAK,CACrB,MAAMQ,EAAMZ,EAAEK,WAAWC,GAAUZ,EAAKgB,IAClCG,EAAMb,EAAEK,WAAWC,GAAUX,EAAKe,EAAI,IACtCI,EAAMd,EAAEK,WAAWC,GAAUV,EAAKc,EAAI,IACtCK,EAAMf,EAAEK,WAAWC,GAAUK,EAAKD,EAAI,IAC5C,IAAIM,EAAKN,GAAK,EACd,IAAK,IAAID,EAAI,EAAGA,EAAIN,GAAK,CACrB,MAAML,EAAKS,EAAOJ,EAAKM,GACjBQ,EAAKV,EAAOE,GAIlBO,EAAKvB,EADLG,EAAKH,EADLE,EAAKF,EADLC,EAAKD,EAAKwB,EAAIvB,EAAIC,EAAIiB,EAAKd,GACbH,EAAIC,EAAIiB,EAAKf,GACbF,EAAIe,EAAIG,EAAKhB,GACba,EAAIK,EAAID,EAAKjB,GAC3BS,EAAOE,KAAOO,EACdL,EAAKf,EACLA,EAAKD,EACLA,EAAKD,EACLA,EAAKuB,GAGb,IAAID,EAAK,EACT,KAAON,EAAIN,GAAK,CACZ,MAAMQ,EAAMZ,EAAEK,WAAWC,GAAUZ,EAAKgB,IACxCM,IAAON,EACP,IAAK,IAAID,EAAI,EAAGA,EAAIN,EAAIM,IAAK,CACzB,MAAMQ,EAAKV,EAAOE,GAClBF,EAAOE,GAAKO,EAAKC,EAAKvB,GAAMsB,EAAKtB,EAAKuB,EAAKD,EAAKA,EAAK,EAAIC,EAAK,EAAIL,IAAQL,EAAOJ,EAAKM,GAAKf,EAAKA,EAAK,EACrGA,EAAKuB,GAGb,OAAOD","file":"../../core/levenshtein.js","sourcesContent":["define(function () {\n    'use strict';\n   \n    /*\n     * Levenshtein distance, from the `js-levenshtein` NPM module.\n     * Copied here to avoid complexity of adding another CommonJS module dependency.\n     */\n    function _min(d0, d1, d2, bx, ay) {\n        return d0 < d1 || d2 < d1 ? d0 > d2 ? d2 + 1 : d0 + 1 : bx === ay ? d1 : d1 + 1;\n    }\n\n    /**\n     * Calculates levenshtein distance.\n     * @param a\n     * @param b\n     */    \n     function levenshtein(a, b) {\n        if (a === b) {\n            return 0;\n        }\n        if (a.length > b.length) {\n            const tmp = a;\n            a = b;\n            b = tmp;\n        }\n        let la = a.length;\n        let lb = b.length;\n        while (la > 0 && a.charCodeAt(la - 1) === b.charCodeAt(lb - 1)) {\n            la--;\n            lb--;\n        }\n        let offset = 0;\n        while (offset < la && a.charCodeAt(offset) === b.charCodeAt(offset)) {\n            offset++;\n        }\n        la -= offset;\n        lb -= offset;\n        if (la === 0 || lb === 1) {\n            return lb;\n        }\n        const vector = new Array(la << 1);\n        for (let y = 0; y < la;) {\n            vector[la + y] = a.charCodeAt(offset + y);\n            vector[y] = ++y;\n        }\n        let x;\n        let d0;\n        let d1;\n        let d2;\n        let d3;\n        for (x = 0; x + 3 < lb;) {\n            const bx0 = b.charCodeAt(offset + (d0 = x));\n            const bx1 = b.charCodeAt(offset + (d1 = x + 1));\n            const bx2 = b.charCodeAt(offset + (d2 = x + 2));\n            const bx3 = b.charCodeAt(offset + (d3 = x + 3));\n            let dd = x += 4;\n            for (let y = 0; y < la;) {\n                const ay = vector[la + y];\n                const dy = vector[y];\n                d0 = _min(dy, d0, d1, bx0, ay);\n                d1 = _min(d0, d1, d2, bx1, ay);\n                d2 = _min(d1, d2, d3, bx2, ay);\n                dd = _min(d2, d3, dd, bx3, ay);\n                vector[y++] = dd;\n                d3 = d2;\n                d2 = d1;\n                d1 = d0;\n                d0 = dy;\n            }\n        }\n        let dd = 0;\n        for (; x < lb;) {\n            const bx0 = b.charCodeAt(offset + (d0 = x));\n            dd = ++x;\n            for (let y = 0; y < la; y++) {\n                const dy = vector[y];\n                vector[y] = dd = dy < d0 || dd < d0 ? dy > dd ? dd + 1 : dy + 1 : bx0 === vector[la + y] ? d0 : d0 + 1;\n                d0 = dy;\n            }\n        }\n        return dd;\n    }\n\n    return levenshtein;\n});"]}