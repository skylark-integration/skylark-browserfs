{"version":3,"sources":["generic/fetch.js"],"names":["define","buffers","api_error","ApiError","ErrorCode","fetchIsAvailable","fetch","Buffer","fetchFileAsync","p","type","cb","request","e","EINVAL","message","then","res","ok","EIO","status","arrayBuffer","buf","from","catch","err","json","fetchFileSizeAsync","method","parseInt","headers","get"],"mappings":";;;;;;;AAAAA,QACI,kBACA,qBACD,SAAUC,EAAQC,GACjB,aAKA,MAAMC,SAAEA,EAAQC,UAAEA,GAAaF,EAEzBG,EAAuC,oBAAZ,OAAqC,OAAVC,OACtDC,OAAEA,GAAWN,EAsDnB,OACII,iBAAkBA,EAClBG,eAtDJ,SAAwBC,EAAGC,EAAMC,GAC7B,IAAIC,EACJ,IACIA,EAAUN,MAAMG,GAEpB,MAAOI,GAEH,OAAOF,EAAG,IAAIR,EAASC,EAAUU,OAAQD,EAAEE,UAE/CH,EACKI,KAAMC,IACP,IAAKA,EAAIC,GACL,OAAOP,EAAG,IAAIR,EAASC,EAAUe,2CAA4CF,EAAIG,WAGjF,OAAQV,GACJ,IAAK,SACDO,EAAII,cACCL,KAAMM,GAAQX,EAAG,KAAMJ,EAAOgB,KAAKD,KACnCE,MAAOC,GAAQd,EAAG,IAAIR,EAASC,EAAUe,IAAKM,EAAIV,WACvD,MACJ,IAAK,OACDE,EAAIS,OACCV,KAAMU,GAASf,EAAG,KAAMe,IACxBF,MAAOC,GAAQd,EAAG,IAAIR,EAASC,EAAUe,IAAKM,EAAIV,WACvD,MACJ,QACIJ,EAAG,IAAIR,EAASC,EAAUU,OAAQ,0BAA4BJ,OAIzEc,MAAOC,GAAQd,EAAG,IAAIR,EAASC,EAAUe,IAAKM,EAAIV,YAwBvDY,mBAhBJ,SAA4BlB,EAAGE,GAC3BL,MAAMG,GAAKmB,OAAQ,SACdZ,KAAMC,GACFA,EAAIC,GAIEP,EAAG,KAAMkB,SAASZ,EAAIa,QAAQC,IAAI,mBAAqB,KAAM,KAH7DpB,EAAG,IAAIR,EAASC,EAAUe,gDAAiDF,EAAIG,YAMzFI,MAAOC,GAAQd,EAAG,IAAIR,EAASC,EAAUe,IAAKM,EAAIV","file":"../../generic/fetch.js","sourcesContent":["define([\n    '../libs/buffers',\n    '../core/api_error'\n], function (buffers,api_error) {\n    'use strict';\n\n    /**\n     * Contains utility methods using 'fetch'.\n     */\n    const { ApiError, ErrorCode }= api_error;\n\n    const fetchIsAvailable = (typeof (fetch) !== \"undefined\" && fetch !== null);\n    const { Buffer } = buffers;\n\n    function fetchFileAsync(p, type, cb) {\n        let request;\n        try {\n            request = fetch(p);\n        }\n        catch (e) {\n            // XXX: fetch will throw a TypeError if the URL has credentials in it\n            return cb(new ApiError(ErrorCode.EINVAL, e.message));\n        }\n        request\n            .then((res) => {\n            if (!res.ok) {\n                return cb(new ApiError(ErrorCode.EIO, `fetch error: response returned code ${res.status}`));\n            }\n            else {\n                switch (type) {\n                    case 'buffer':\n                        res.arrayBuffer()\n                            .then((buf) => cb(null, Buffer.from(buf)))\n                            .catch((err) => cb(new ApiError(ErrorCode.EIO, err.message)));\n                        break;\n                    case 'json':\n                        res.json()\n                            .then((json) => cb(null, json))\n                            .catch((err) => cb(new ApiError(ErrorCode.EIO, err.message)));\n                        break;\n                    default:\n                        cb(new ApiError(ErrorCode.EINVAL, \"Invalid download type: \" + type));\n                }\n            }\n        })\n            .catch((err) => cb(new ApiError(ErrorCode.EIO, err.message)));\n    }\n\n    /**\n     * Asynchronously retrieves the size of the given file in bytes.\n     * @hidden\n     */\n\n    function fetchFileSizeAsync(p, cb) {\n        fetch(p, { method: 'HEAD' })\n            .then((res) => {\n            if (!res.ok) {\n                return cb(new ApiError(ErrorCode.EIO, `fetch HEAD error: response returned code ${res.status}`));\n            }\n            else {\n                return cb(null, parseInt(res.headers.get('Content-Length') || '-1', 10));\n            }\n        })\n            .catch((err) => cb(new ApiError(ErrorCode.EIO, err.message)));\n    }\n\n    return {\n        fetchIsAvailable: fetchIsAvailable,\n        fetchFileAsync: fetchFileAsync,\n        fetchFileSizeAsync: fetchFileSizeAsync\n    };\n});"]}