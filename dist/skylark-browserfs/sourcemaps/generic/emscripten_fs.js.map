{"version":3,"sources":["generic/emscripten_fs.js"],"names":["define","fs","util","uint8Array2Buffer","BFSEmscriptenStreamOps","[object Object]","this","nodefs","getNodeFS","FS","getFS","PATH","getPATH","ERRNO_CODES","getERRNO_CODES","stream","path","realPath","node","isFile","mode","nfd","openSync","flagsToPermissionString","flags","e","code","ErrnoError","closeSync","buffer","offset","length","position","readSync","writeSync","whence","fstatSync","size","EINVAL","BFSEmscriptenNodeOps","stat","lstatSync","dev","ino","nlink","uid","gid","rdev","atime","mtime","ctime","blksize","blocks","attr","undefined","chmodSync","timestamp","date","Date","utimesSync","truncateSync","parent","name","join2","getMode","createNode","isDir","mkdirSync","writeFileSync","oldNode","newDir","newName","oldPath","newPath","renameSync","unlinkSync","rmdirSync","contents","readdirSync","push","symlinkSync","readlinkSync","_FS","self","_PATH","_ERRNO_CODES","flagsToPermissionStringMap","0","1","2","64","65","66","129","193","514","577","578","705","706","1024","1025","1026","1089","1090","1153","1154","1217","1218","4096","4098","node_ops","stream_ops","m","opts","root","isLink","parts","mount","reverse","join","apply","parsedFlags","parseInt"],"mappings":"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","file":"../../generic/emscripten_fs.js","sourcesContent":["define([\n    '../core/node_fs',\n    '../core/util'\n], function (fs, util) {\n    'use strict';\n    const { uint8Array2Buffer } = util;\n\n    class BFSEmscriptenStreamOps {\n        constructor(fs) {\n            this.fs = fs;\n            this.nodefs = fs.getNodeFS();\n            this.FS = fs.getFS();\n            this.PATH = fs.getPATH();\n            this.ERRNO_CODES = fs.getERRNO_CODES();\n        }\n        open(stream) {\n            const path = this.fs.realPath(stream.node);\n            const FS = this.FS;\n            try {\n                if (FS.isFile(stream.node.mode)) {\n                    stream.nfd = this.nodefs.openSync(path, this.fs.flagsToPermissionString(stream.flags));\n                }\n            }\n            catch (e) {\n                if (!e.code) {\n                    throw e;\n                }\n                throw new FS.ErrnoError(this.ERRNO_CODES[e.code]);\n            }\n        }\n        close(stream) {\n            const FS = this.FS;\n            try {\n                if (FS.isFile(stream.node.mode) && stream.nfd) {\n                    this.nodefs.closeSync(stream.nfd);\n                }\n            }\n            catch (e) {\n                if (!e.code) {\n                    throw e;\n                }\n                throw new FS.ErrnoError(this.ERRNO_CODES[e.code]);\n            }\n        }\n        read(stream, buffer, offset, length, position) {\n            // Avoid copying overhead by reading directly into buffer.\n            try {\n                return this.nodefs.readSync(stream.nfd, uint8Array2Buffer(buffer), offset, length, position);\n            }\n            catch (e) {\n                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n            }\n        }\n        write(stream, buffer, offset, length, position) {\n            // Avoid copying overhead.\n            try {\n                return this.nodefs.writeSync(stream.nfd, uint8Array2Buffer(buffer), offset, length, position);\n            }\n            catch (e) {\n                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n            }\n        }\n        llseek(stream, offset, whence) {\n            let position = offset;\n            if (whence === 1) { // SEEK_CUR.\n                position += stream.position;\n            }\n            else if (whence === 2) { // SEEK_END.\n                if (this.FS.isFile(stream.node.mode)) {\n                    try {\n                        const stat = this.nodefs.fstatSync(stream.nfd);\n                        position += stat.size;\n                    }\n                    catch (e) {\n                        throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n                    }\n                }\n            }\n            if (position < 0) {\n                throw new this.FS.ErrnoError(this.ERRNO_CODES.EINVAL);\n            }\n            stream.position = position;\n            return position;\n        }\n    }\n    class BFSEmscriptenNodeOps {\n        constructor(fs) {\n            this.fs = fs;\n            this.nodefs = fs.getNodeFS();\n            this.FS = fs.getFS();\n            this.PATH = fs.getPATH();\n            this.ERRNO_CODES = fs.getERRNO_CODES();\n        }\n        getattr(node) {\n            const path = this.fs.realPath(node);\n            let stat;\n            try {\n                stat = this.nodefs.lstatSync(path);\n            }\n            catch (e) {\n                if (!e.code) {\n                    throw e;\n                }\n                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n            }\n            return {\n                dev: stat.dev,\n                ino: stat.ino,\n                mode: stat.mode,\n                nlink: stat.nlink,\n                uid: stat.uid,\n                gid: stat.gid,\n                rdev: stat.rdev,\n                size: stat.size,\n                atime: stat.atime,\n                mtime: stat.mtime,\n                ctime: stat.ctime,\n                blksize: stat.blksize,\n                blocks: stat.blocks\n            };\n        }\n        setattr(node, attr) {\n            const path = this.fs.realPath(node);\n            try {\n                if (attr.mode !== undefined) {\n                    this.nodefs.chmodSync(path, attr.mode);\n                    // update the common node structure mode as well\n                    node.mode = attr.mode;\n                }\n                if (attr.timestamp !== undefined) {\n                    const date = new Date(attr.timestamp);\n                    this.nodefs.utimesSync(path, date, date);\n                }\n            }\n            catch (e) {\n                if (!e.code) {\n                    throw e;\n                }\n                // Ignore not supported errors. Emscripten does utimesSync when it\n                // writes files, but never really requires the value to be set.\n                if (e.code !== \"ENOTSUP\") {\n                    throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n                }\n            }\n            if (attr.size !== undefined) {\n                try {\n                    this.nodefs.truncateSync(path, attr.size);\n                }\n                catch (e) {\n                    if (!e.code) {\n                        throw e;\n                    }\n                    throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n                }\n            }\n        }\n        lookup(parent, name) {\n            const path = this.PATH.join2(this.fs.realPath(parent), name);\n            const mode = this.fs.getMode(path);\n            return this.fs.createNode(parent, name, mode);\n        }\n        mknod(parent, name, mode, dev) {\n            const node = this.fs.createNode(parent, name, mode, dev);\n            // create the backing node for this in the fs root as well\n            const path = this.fs.realPath(node);\n            try {\n                if (this.FS.isDir(node.mode)) {\n                    this.nodefs.mkdirSync(path, node.mode);\n                }\n                else {\n                    this.nodefs.writeFileSync(path, '', { mode: node.mode });\n                }\n            }\n            catch (e) {\n                if (!e.code) {\n                    throw e;\n                }\n                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n            }\n            return node;\n        }\n        rename(oldNode, newDir, newName) {\n            const oldPath = this.fs.realPath(oldNode);\n            const newPath = this.PATH.join2(this.fs.realPath(newDir), newName);\n            try {\n                this.nodefs.renameSync(oldPath, newPath);\n                // This logic is missing from the original NodeFS,\n                // causing Emscripten's filesystem to think that the old file still exists.\n                oldNode.name = newName;\n                oldNode.parent = newDir;\n            }\n            catch (e) {\n                if (!e.code) {\n                    throw e;\n                }\n                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n            }\n        }\n        unlink(parent, name) {\n            const path = this.PATH.join2(this.fs.realPath(parent), name);\n            try {\n                this.nodefs.unlinkSync(path);\n            }\n            catch (e) {\n                if (!e.code) {\n                    throw e;\n                }\n                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n            }\n        }\n        rmdir(parent, name) {\n            const path = this.PATH.join2(this.fs.realPath(parent), name);\n            try {\n                this.nodefs.rmdirSync(path);\n            }\n            catch (e) {\n                if (!e.code) {\n                    throw e;\n                }\n                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n            }\n        }\n        readdir(node) {\n            const path = this.fs.realPath(node);\n            try {\n                // Node does not list . and .. in directory listings,\n                // but Emscripten expects it.\n                const contents = this.nodefs.readdirSync(path);\n                contents.push('.', '..');\n                return contents;\n            }\n            catch (e) {\n                if (!e.code) {\n                    throw e;\n                }\n                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n            }\n        }\n        symlink(parent, newName, oldPath) {\n            const newPath = this.PATH.join2(this.fs.realPath(parent), newName);\n            try {\n                this.nodefs.symlinkSync(oldPath, newPath);\n            }\n            catch (e) {\n                if (!e.code) {\n                    throw e;\n                }\n                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n            }\n        }\n        readlink(node) {\n            const path = this.fs.realPath(node);\n            try {\n                return this.nodefs.readlinkSync(path);\n            }\n            catch (e) {\n                if (!e.code) {\n                    throw e;\n                }\n                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n            }\n        }\n    }\n    class BFSEmscriptenFS {\n        constructor(_FS = self['FS'], _PATH = self['PATH'], _ERRNO_CODES = self['ERRNO_CODES'], nodefs = fs) {\n            // This maps the integer permission modes from http://linux.die.net/man/3/open\n            // to node.js-specific file open permission strings at http://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback\n            this.flagsToPermissionStringMap = {\n                0 /*O_RDONLY*/: 'r',\n                1 /*O_WRONLY*/: 'r+',\n                2 /*O_RDWR*/: 'r+',\n                64 /*O_CREAT*/: 'r',\n                65 /*O_WRONLY|O_CREAT*/: 'r+',\n                66 /*O_RDWR|O_CREAT*/: 'r+',\n                129 /*O_WRONLY|O_EXCL*/: 'rx+',\n                193 /*O_WRONLY|O_CREAT|O_EXCL*/: 'rx+',\n                514 /*O_RDWR|O_TRUNC*/: 'w+',\n                577 /*O_WRONLY|O_CREAT|O_TRUNC*/: 'w',\n                578 /*O_CREAT|O_RDWR|O_TRUNC*/: 'w+',\n                705 /*O_WRONLY|O_CREAT|O_EXCL|O_TRUNC*/: 'wx',\n                706 /*O_RDWR|O_CREAT|O_EXCL|O_TRUNC*/: 'wx+',\n                1024 /*O_APPEND*/: 'a',\n                1025 /*O_WRONLY|O_APPEND*/: 'a',\n                1026 /*O_RDWR|O_APPEND*/: 'a+',\n                1089 /*O_WRONLY|O_CREAT|O_APPEND*/: 'a',\n                1090 /*O_RDWR|O_CREAT|O_APPEND*/: 'a+',\n                1153 /*O_WRONLY|O_EXCL|O_APPEND*/: 'ax',\n                1154 /*O_RDWR|O_EXCL|O_APPEND*/: 'ax+',\n                1217 /*O_WRONLY|O_CREAT|O_EXCL|O_APPEND*/: 'ax',\n                1218 /*O_RDWR|O_CREAT|O_EXCL|O_APPEND*/: 'ax+',\n                4096 /*O_RDONLY|O_DSYNC*/: 'rs',\n                4098 /*O_RDWR|O_DSYNC*/: 'rs+'\n            };\n            this.nodefs = nodefs;\n            this.FS = _FS;\n            this.PATH = _PATH;\n            this.ERRNO_CODES = _ERRNO_CODES;\n            this.node_ops = new BFSEmscriptenNodeOps(this);\n            this.stream_ops = new BFSEmscriptenStreamOps(this);\n        }\n        mount(m) {\n            return this.createNode(null, '/', this.getMode(m.opts.root), 0);\n        }\n        createNode(parent, name, mode, dev) {\n            const FS = this.FS;\n            if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {\n                throw new FS.ErrnoError(this.ERRNO_CODES.EINVAL);\n            }\n            const node = FS.createNode(parent, name, mode);\n            node.node_ops = this.node_ops;\n            node.stream_ops = this.stream_ops;\n            return node;\n        }\n        getMode(path) {\n            let stat;\n            try {\n                stat = this.nodefs.lstatSync(path);\n            }\n            catch (e) {\n                if (!e.code) {\n                    throw e;\n                }\n                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);\n            }\n            return stat.mode;\n        }\n        realPath(node) {\n            const parts = [];\n            while (node.parent !== node) {\n                parts.push(node.name);\n                node = node.parent;\n            }\n            parts.push(node.mount.opts.root);\n            parts.reverse();\n            return this.PATH.join.apply(null, parts);\n        }\n        flagsToPermissionString(flags) {\n            let parsedFlags = (typeof flags === \"string\") ? parseInt(flags, 10) : flags;\n            parsedFlags &= 0x1FFF;\n            if (parsedFlags in this.flagsToPermissionStringMap) {\n                return this.flagsToPermissionStringMap[parsedFlags];\n            }\n            else {\n                return flags;\n            }\n        }\n        getNodeFS() {\n            return this.nodefs;\n        }\n        getFS() {\n            return this.FS;\n        }\n        getPATH() {\n            return this.PATH;\n        }\n        getERRNO_CODES() {\n            return this.ERRNO_CODES;\n        }\n    }\n\n    return BFSEmscriptenFS;\n});"]}