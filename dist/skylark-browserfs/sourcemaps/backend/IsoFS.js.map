{"version":3,"sources":["backend/IsoFS.js"],"names":["define","api_error","node_fs_stats","file_system","file_flag","preload_file","util","path","ApiError","ErrorCode","Stats","FileType","SynchronousFileSystem","ActionType","NoSyncFile","copyingSlice","bufferValidator","rockRidgeIdentifier","getASCIIString","data","startIndex","length","toString","trim","getJolietString","String","fromCharCode","pairs","Math","floor","chars","Array","i","pos","join","getDate","year","parseInt","mon","day","hour","min","sec","hundrethsSec","Date","getShortFormDate","yearsSince1900","month","minute","second","constructSystemUseEntry","bigData","slice","sue","SystemUseEntry","signatureWord","CEEntry","PDEntry","SPEntry","STEntry","EREntry","ESEntry","PXEntry","PNEntry","SLEntry","NMEntry","CLEntry","PLEntry","REEntry","TFEntry","SFEntry","RREntry","constructSystemUseEntries","len","isoData","entries","entry","concat","getEntries","push","VolumeDescriptor","[object Object]","this","_data","PrimaryOrSupplementaryVolumeDescriptor","super","_root","_getString32","readUInt32LE","readUInt16LE","readUInt32BE","_constructRootDirectoryRecord","rootCheckForRockRidge","_getString","idx","PrimaryVolumeDescriptor","type","EIO","ISODirectoryRecord","SupplementaryVolumeDescriptor","escapeSequence","third","JolietDirectoryRecord","DirectoryRecord","rockRidgeOffset","_suEntries","_fileOrDir","_rockRidgeOffset","dir","getDirectory","getDotEntry","_getRockRidgeOffset","hasRockRidge","fn","_rockRidgeFilename","ident","identifier","isDirectory","versionSeparator","indexOf","rv","fileFlags","getSUEntries","filter","e","p","getStr","_getGetString","components","componentRecords","component","flags","content","continueFlag","Error","lba","dataLength","_constructDirectory","_constructSUEntries","nmEntries","str","getString","name","suEntries","spEntry","checkBytesPass","extensionIdentifier","bytesSkipped","ISODirectory","JolietDirectory","readUInt16BE","_entries","start","continuationLba","continuationLbaOffset","continuationLength","identifierLength","descriptorLength","sourceLength","records","record","SLComponentRecord","componentLength","_longFormDates","previousDates","Directory","_fileList","_fileMap","_record","iLimit","childDirectoryLba","Infinity","r","_constructDirectoryRecord","fname","fileName","getRockRidgeOffset","IsoFS","vdTerminatorFound","candidateVDs","forEach","v","_pvd","rootDirectoryEntry","_name","opts","cb","isLstat","_getDirectoryRecord","ENOENT","_getStats","mode","isWriteable","EPERM","isSymlink","openSync","resolve","getSymlinkPath","EISDIR","getFile","stats","pathExistsAction","THROW_EXCEPTION","TRUNCATE_FILE","EEXIST","NOP","EINVAL","getFileList","ENOTDIR","encoding","flag","fd","fdBuff","getBuffer","closeSync","split","getRecord","newP","dirRec","date","recordingDate","getTime","atime","mtime","ctime","access","modify","creation","DIRECTORY","FILE","Name","Options","description","validator"],"mappings":"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","file":"../../backend/IsoFS.js","sourcesContent":["define([\n    '../core/api_error',\n    '../core/node_fs_stats',\n    '../core/file_system',\n    '../core/file_flag',\n    '../generic/preload_file',\n    '../core/util',\n    '../libs/path'\n], function (api_error,  node_fs_stats,file_system, file_flag, preload_file, util, path) {\n    'use strict';\n\n    const { ApiError, ErrorCode } = api_error;\n    const { Stats, FileType }  = node_fs_stats;\n    const { SynchronousFileSystem }  = file_system;\n    const { ActionType }  = file_flag;\n    const { NoSyncFile }  = preload_file;\n    const { copyingSlice, bufferValidator }  = util;\n\n    /**\n     * @hidden\n     */\n    const rockRidgeIdentifier = \"IEEE_P1282\";\n    /**\n     * @hidden\n     */\n    function getASCIIString(data, startIndex, length) {\n        return data.toString('ascii', startIndex, startIndex + length).trim();\n    }\n    /**\n     * @hidden\n     */\n    function getJolietString(data, startIndex, length) {\n        if (length === 1) {\n            // Special: Root, parent, current directory are still a single byte.\n            return String.fromCharCode(data[startIndex]);\n        }\n        // UTF16-BE, which isn't natively supported by NodeJS Buffers.\n        // Length should be even, but pessimistically floor just in case.\n        const pairs = Math.floor(length / 2);\n        const chars = new Array(pairs);\n        for (let i = 0; i < pairs; i++) {\n            const pos = startIndex + (i << 1);\n            chars[i] = String.fromCharCode(data[pos + 1] | (data[pos] << 8));\n        }\n        return chars.join('');\n    }\n    /**\n     * @hidden\n     */\n    function getDate(data, startIndex) {\n        const year = parseInt(getASCIIString(data, startIndex, 4), 10);\n        const mon = parseInt(getASCIIString(data, startIndex + 4, 2), 10);\n        const day = parseInt(getASCIIString(data, startIndex + 6, 2), 10);\n        const hour = parseInt(getASCIIString(data, startIndex + 8, 2), 10);\n        const min = parseInt(getASCIIString(data, startIndex + 10, 2), 10);\n        const sec = parseInt(getASCIIString(data, startIndex + 12, 2), 10);\n        const hundrethsSec = parseInt(getASCIIString(data, startIndex + 14, 2), 10);\n        // Last is a time-zone offset, but JavaScript dates don't support time zones well.\n        return new Date(year, mon, day, hour, min, sec, hundrethsSec * 100);\n    }\n    /**\n     * @hidden\n     */\n    function getShortFormDate(data, startIndex) {\n        const yearsSince1900 = data[startIndex];\n        const month = data[startIndex + 1];\n        const day = data[startIndex + 2];\n        const hour = data[startIndex + 3];\n        const minute = data[startIndex + 4];\n        const second = data[startIndex + 5];\n        // JavaScript's Date support isn't so great; ignore timezone.\n        // const offsetFromGMT = this._data[24];\n        return new Date(yearsSince1900, month - 1, day, hour, minute, second);\n    }\n    /**\n     * @hidden\n     */\n    function constructSystemUseEntry(bigData, i) {\n        const data = bigData.slice(i);\n        const sue = new SystemUseEntry(data);\n        switch (sue.signatureWord()) {\n            case 17221 /* CE */:\n                return new CEEntry(data);\n            case 20548 /* PD */:\n                return new PDEntry(data);\n            case 21328 /* SP */:\n                return new SPEntry(data);\n            case 21332 /* ST */:\n                return new STEntry(data);\n            case 17746 /* ER */:\n                return new EREntry(data);\n            case 17747 /* ES */:\n                return new ESEntry(data);\n            case 20568 /* PX */:\n                return new PXEntry(data);\n            case 20558 /* PN */:\n                return new PNEntry(data);\n            case 21324 /* SL */:\n                return new SLEntry(data);\n            case 20045 /* NM */:\n                return new NMEntry(data);\n            case 17228 /* CL */:\n                return new CLEntry(data);\n            case 20556 /* PL */:\n                return new PLEntry(data);\n            case 21061 /* RE */:\n                return new REEntry(data);\n            case 21574 /* TF */:\n                return new TFEntry(data);\n            case 21318 /* SF */:\n                return new SFEntry(data);\n            case 21074 /* RR */:\n                return new RREntry(data);\n            default:\n                return sue;\n        }\n    }\n    /**\n     * @hidden\n     */\n    function constructSystemUseEntries(data, i, len, isoData) {\n        // If the remaining allocated space following the last recorded System Use Entry in a System\n        // Use field or Continuation Area is less than four bytes long, it cannot contain a System\n        // Use Entry and shall be ignored\n        len = len - 4;\n        let entries = new Array();\n        while (i < len) {\n            const entry = constructSystemUseEntry(data, i);\n            const length = entry.length();\n            if (length === 0) {\n                // Invalid SU section; prevent infinite loop.\n                return entries;\n            }\n            i += length;\n            if (entry instanceof STEntry) {\n                // ST indicates the end of entries.\n                break;\n            }\n            if (entry instanceof CEEntry) {\n                entries = entries.concat(entry.getEntries(isoData));\n            }\n            else {\n                entries.push(entry);\n            }\n        }\n        return entries;\n    }\n    /**\n     * @hidden\n     */\n    class VolumeDescriptor {\n        constructor(data) {\n            this._data = data;\n        }\n        type() {\n            return this._data[0];\n        }\n        standardIdentifier() {\n            return getASCIIString(this._data, 1, 5);\n        }\n        version() {\n            return this._data[6];\n        }\n        data() {\n            return this._data.slice(7, 2048);\n        }\n    }\n    /**\n     * @hidden\n     */\n    class PrimaryOrSupplementaryVolumeDescriptor extends VolumeDescriptor {\n        constructor(data) {\n            super(data);\n            this._root = null;\n        }\n        systemIdentifier() {\n            return this._getString32(8);\n        }\n        volumeIdentifier() {\n            return this._getString32(40);\n        }\n        volumeSpaceSize() {\n            return this._data.readUInt32LE(80);\n        }\n        volumeSetSize() {\n            return this._data.readUInt16LE(120);\n        }\n        volumeSequenceNumber() {\n            return this._data.readUInt16LE(124);\n        }\n        logicalBlockSize() {\n            return this._data.readUInt16LE(128);\n        }\n        pathTableSize() {\n            return this._data.readUInt32LE(132);\n        }\n        locationOfTypeLPathTable() {\n            return this._data.readUInt32LE(140);\n        }\n        locationOfOptionalTypeLPathTable() {\n            return this._data.readUInt32LE(144);\n        }\n        locationOfTypeMPathTable() {\n            return this._data.readUInt32BE(148);\n        }\n        locationOfOptionalTypeMPathTable() {\n            return this._data.readUInt32BE(152);\n        }\n        rootDirectoryEntry(isoData) {\n            if (this._root === null) {\n                this._root = this._constructRootDirectoryRecord(this._data.slice(156));\n                this._root.rootCheckForRockRidge(isoData);\n            }\n            return this._root;\n        }\n        volumeSetIdentifier() {\n            return this._getString(190, 128);\n        }\n        publisherIdentifier() {\n            return this._getString(318, 128);\n        }\n        dataPreparerIdentifier() {\n            return this._getString(446, 128);\n        }\n        applicationIdentifier() {\n            return this._getString(574, 128);\n        }\n        copyrightFileIdentifier() {\n            return this._getString(702, 38);\n        }\n        abstractFileIdentifier() {\n            return this._getString(740, 36);\n        }\n        bibliographicFileIdentifier() {\n            return this._getString(776, 37);\n        }\n        volumeCreationDate() {\n            return getDate(this._data, 813);\n        }\n        volumeModificationDate() {\n            return getDate(this._data, 830);\n        }\n        volumeExpirationDate() {\n            return getDate(this._data, 847);\n        }\n        volumeEffectiveDate() {\n            return getDate(this._data, 864);\n        }\n        fileStructureVersion() {\n            return this._data[881];\n        }\n        applicationUsed() {\n            return this._data.slice(883, 883 + 512);\n        }\n        reserved() {\n            return this._data.slice(1395, 1395 + 653);\n        }\n        _getString32(idx) {\n            return this._getString(idx, 32);\n        }\n    }\n    /**\n     * @hidden\n     */\n    class PrimaryVolumeDescriptor extends PrimaryOrSupplementaryVolumeDescriptor {\n        constructor(data) {\n            super(data);\n            if (this.type() !== 1 /* PrimaryVolumeDescriptor */) {\n                throw new ApiError(ErrorCode.EIO, `Invalid primary volume descriptor.`);\n            }\n        }\n        name() {\n            return \"ISO9660\";\n        }\n        _constructRootDirectoryRecord(data) {\n            return new ISODirectoryRecord(data, -1);\n        }\n        _getString(idx, len) {\n            return this._getString(idx, len);\n        }\n    }\n    /**\n     * @hidden\n     */\n    class SupplementaryVolumeDescriptor extends PrimaryOrSupplementaryVolumeDescriptor {\n        constructor(data) {\n            super(data);\n            if (this.type() !== 2 /* SupplementaryVolumeDescriptor */) {\n                throw new ApiError(ErrorCode.EIO, `Invalid supplementary volume descriptor.`);\n            }\n            const escapeSequence = this.escapeSequence();\n            const third = escapeSequence[2];\n            // Third character identifies what 'level' of the UCS specification to follow.\n            // We ignore it.\n            if (escapeSequence[0] !== 0x25 || escapeSequence[1] !== 0x2F ||\n                (third !== 0x40 && third !== 0x43 && third !== 0x45)) {\n                throw new ApiError(ErrorCode.EIO, `Unrecognized escape sequence for SupplementaryVolumeDescriptor: ${escapeSequence.toString()}`);\n            }\n        }\n        name() {\n            return \"Joliet\";\n        }\n        escapeSequence() {\n            return this._data.slice(88, 120);\n        }\n        _constructRootDirectoryRecord(data) {\n            return new JolietDirectoryRecord(data, -1);\n        }\n        _getString(idx, len) {\n            return getJolietString(this._data, idx, len);\n        }\n    }\n    /**\n     * @hidden\n     */\n    class DirectoryRecord {\n        constructor(data, rockRidgeOffset) {\n            this._suEntries = null;\n            this._fileOrDir = null;\n            this._data = data;\n            this._rockRidgeOffset = rockRidgeOffset;\n        }\n        hasRockRidge() {\n            return this._rockRidgeOffset > -1;\n        }\n        getRockRidgeOffset() {\n            return this._rockRidgeOffset;\n        }\n        /**\n         * !!ONLY VALID ON ROOT NODE!!\n         * Checks if Rock Ridge is enabled, and sets the offset.\n         */\n        rootCheckForRockRidge(isoData) {\n            const dir = this.getDirectory(isoData);\n            this._rockRidgeOffset = dir.getDotEntry(isoData)._getRockRidgeOffset(isoData);\n            if (this._rockRidgeOffset > -1) {\n                // Wipe out directory. Start over with RR knowledge.\n                this._fileOrDir = null;\n            }\n        }\n        length() {\n            return this._data[0];\n        }\n        extendedAttributeRecordLength() {\n            return this._data[1];\n        }\n        lba() {\n            return this._data.readUInt32LE(2) * 2048;\n        }\n        dataLength() {\n            return this._data.readUInt32LE(10);\n        }\n        recordingDate() {\n            return getShortFormDate(this._data, 18);\n        }\n        fileFlags() {\n            return this._data[25];\n        }\n        fileUnitSize() {\n            return this._data[26];\n        }\n        interleaveGapSize() {\n            return this._data[27];\n        }\n        volumeSequenceNumber() {\n            return this._data.readUInt16LE(28);\n        }\n        identifier() {\n            return this._getString(33, this._data[32]);\n        }\n        fileName(isoData) {\n            if (this.hasRockRidge()) {\n                const fn = this._rockRidgeFilename(isoData);\n                if (fn !== null) {\n                    return fn;\n                }\n            }\n            const ident = this.identifier();\n            if (this.isDirectory(isoData)) {\n                return ident;\n            }\n            // Files:\n            // - MUST have 0x2E (.) separating the name from the extension\n            // - MUST have 0x3B (;) separating the file name and extension from the version\n            // Gets expanded to two-byte char in Unicode directory records.\n            const versionSeparator = ident.indexOf(';');\n            if (versionSeparator === -1) {\n                // Some Joliet filenames lack the version separator, despite the standard\n                // specifying that it should be there.\n                return ident;\n            }\n            else if (ident[versionSeparator - 1] === '.') {\n                // Empty extension. Do not include '.' in the filename.\n                return ident.slice(0, versionSeparator - 1);\n            }\n            else {\n                // Include up to version separator.\n                return ident.slice(0, versionSeparator);\n            }\n        }\n        isDirectory(isoData) {\n            let rv = !!(this.fileFlags() & 2 /* Directory */);\n            // If it lacks the Directory flag, it may still be a directory if we've exceeded the directory\n            // depth limit. Rock Ridge marks these as files and adds a special attribute.\n            if (!rv && this.hasRockRidge()) {\n                rv = this.getSUEntries(isoData).filter((e) => e instanceof CLEntry).length > 0;\n            }\n            return rv;\n        }\n        isSymlink(isoData) {\n            return this.hasRockRidge() && this.getSUEntries(isoData).filter((e) => e instanceof SLEntry).length > 0;\n        }\n        getSymlinkPath(isoData) {\n            let p = \"\";\n            const entries = this.getSUEntries(isoData);\n            const getStr = this._getGetString();\n            for (const entry of entries) {\n                if (entry instanceof SLEntry) {\n                    const components = entry.componentRecords();\n                    for (const component of components) {\n                        const flags = component.flags();\n                        if (flags & 2 /* CURRENT */) {\n                            p += \"./\";\n                        }\n                        else if (flags & 4 /* PARENT */) {\n                            p += \"../\";\n                        }\n                        else if (flags & 8 /* ROOT */) {\n                            p += \"/\";\n                        }\n                        else {\n                            p += component.content(getStr);\n                            if (!(flags & 1 /* CONTINUE */)) {\n                                p += '/';\n                            }\n                        }\n                    }\n                    if (!entry.continueFlag()) {\n                        // We are done with this link.\n                        break;\n                    }\n                }\n            }\n            if (p.length > 1 && p[p.length - 1] === '/') {\n                // Trim trailing '/'.\n                return p.slice(0, p.length - 1);\n            }\n            else {\n                return p;\n            }\n        }\n        getFile(isoData) {\n            if (this.isDirectory(isoData)) {\n                throw new Error(`Tried to get a File from a directory.`);\n            }\n            if (this._fileOrDir === null) {\n                this._fileOrDir = isoData.slice(this.lba(), this.lba() + this.dataLength());\n            }\n            return this._fileOrDir;\n        }\n        getDirectory(isoData) {\n            if (!this.isDirectory(isoData)) {\n                throw new Error(`Tried to get a Directory from a file.`);\n            }\n            if (this._fileOrDir === null) {\n                this._fileOrDir = this._constructDirectory(isoData);\n            }\n            return this._fileOrDir;\n        }\n        getSUEntries(isoData) {\n            if (!this._suEntries) {\n                this._constructSUEntries(isoData);\n            }\n            return this._suEntries;\n        }\n        _rockRidgeFilename(isoData) {\n            const nmEntries = this.getSUEntries(isoData).filter((e) => e instanceof NMEntry);\n            if (nmEntries.length === 0 || nmEntries[0].flags() & (2 /* CURRENT */ | 4 /* PARENT */)) {\n                return null;\n            }\n            let str = '';\n            const getString = this._getGetString();\n            for (const e of nmEntries) {\n                str += e.name(getString);\n                if (!(e.flags() & 1 /* CONTINUE */)) {\n                    break;\n                }\n            }\n            return str;\n        }\n        _constructSUEntries(isoData) {\n            let i = 33 + this._data[32];\n            if (i % 2 === 1) {\n                // Skip padding field.\n                i++;\n            }\n            i += this._rockRidgeOffset;\n            this._suEntries = constructSystemUseEntries(this._data, i, this.length(), isoData);\n        }\n        /**\n         * !!ONLY VALID ON FIRST ENTRY OF ROOT DIRECTORY!!\n         * Returns -1 if rock ridge is not enabled. Otherwise, returns the offset\n         * at which system use fields begin.\n         */\n        _getRockRidgeOffset(isoData) {\n            // In the worst case, we get some garbage SU entries.\n            // Fudge offset to 0 before proceeding.\n            this._rockRidgeOffset = 0;\n            const suEntries = this.getSUEntries(isoData);\n            if (suEntries.length > 0) {\n                const spEntry = suEntries[0];\n                if (spEntry instanceof SPEntry && spEntry.checkBytesPass()) {\n                    // SUSP is in use.\n                    for (let i = 1; i < suEntries.length; i++) {\n                        const entry = suEntries[i];\n                        if (entry instanceof RREntry || (entry instanceof EREntry && entry.extensionIdentifier() === rockRidgeIdentifier)) {\n                            // Rock Ridge is in use!\n                            return spEntry.bytesSkipped();\n                        }\n                    }\n                }\n            }\n            // Failed.\n            this._rockRidgeOffset = -1;\n            return -1;\n        }\n    }\n    /**\n     * @hidden\n     */\n    class ISODirectoryRecord extends DirectoryRecord {\n        constructor(data, rockRidgeOffset) {\n            super(data, rockRidgeOffset);\n        }\n        _getString(i, len) {\n            return getASCIIString(this._data, i, len);\n        }\n        _constructDirectory(isoData) {\n            return new ISODirectory(this, isoData);\n        }\n        _getGetString() {\n            return getASCIIString;\n        }\n    }\n    /**\n     * @hidden\n     */\n    class JolietDirectoryRecord extends DirectoryRecord {\n        constructor(data, rockRidgeOffset) {\n            super(data, rockRidgeOffset);\n        }\n        _getString(i, len) {\n            return getJolietString(this._data, i, len);\n        }\n        _constructDirectory(isoData) {\n            return new JolietDirectory(this, isoData);\n        }\n        _getGetString() {\n            return getJolietString;\n        }\n    }\n    /**\n     * @hidden\n     */\n    class SystemUseEntry {\n        constructor(data) {\n            this._data = data;\n        }\n        signatureWord() {\n            return this._data.readUInt16BE(0);\n        }\n        signatureWordString() {\n            return getASCIIString(this._data, 0, 2);\n        }\n        length() {\n            return this._data[2];\n        }\n        suVersion() {\n            return this._data[3];\n        }\n    }\n    /**\n     * Continuation entry.\n     * @hidden\n     */\n    class CEEntry extends SystemUseEntry {\n        constructor(data) {\n            super(data);\n            this._entries = null;\n        }\n        /**\n         * Logical block address of the continuation area.\n         */\n        continuationLba() {\n            return this._data.readUInt32LE(4);\n        }\n        /**\n         * Offset into the logical block.\n         */\n        continuationLbaOffset() {\n            return this._data.readUInt32LE(12);\n        }\n        /**\n         * Length of the continuation area.\n         */\n        continuationLength() {\n            return this._data.readUInt32LE(20);\n        }\n        getEntries(isoData) {\n            if (!this._entries) {\n                const start = this.continuationLba() * 2048 + this.continuationLbaOffset();\n                this._entries = constructSystemUseEntries(isoData, start, this.continuationLength(), isoData);\n            }\n            return this._entries;\n        }\n    }\n    /**\n     * Padding entry.\n     * @hidden\n     */\n    class PDEntry extends SystemUseEntry {\n        constructor(data) {\n            super(data);\n        }\n    }\n    /**\n     * Identifies that SUSP is in-use.\n     * @hidden\n     */\n    class SPEntry extends SystemUseEntry {\n        constructor(data) {\n            super(data);\n        }\n        checkBytesPass() {\n            return this._data[4] === 0xBE && this._data[5] === 0xEF;\n        }\n        bytesSkipped() {\n            return this._data[6];\n        }\n    }\n    /**\n     * Identifies the end of the SUSP entries.\n     * @hidden\n     */\n    class STEntry extends SystemUseEntry {\n        constructor(data) {\n            super(data);\n        }\n    }\n    /**\n     * Specifies system-specific extensions to SUSP.\n     * @hidden\n     */\n    class EREntry extends SystemUseEntry {\n        constructor(data) {\n            super(data);\n        }\n        identifierLength() {\n            return this._data[4];\n        }\n        descriptorLength() {\n            return this._data[5];\n        }\n        sourceLength() {\n            return this._data[6];\n        }\n        extensionVersion() {\n            return this._data[7];\n        }\n        extensionIdentifier() {\n            return getASCIIString(this._data, 8, this.identifierLength());\n        }\n        extensionDescriptor() {\n            return getASCIIString(this._data, 8 + this.identifierLength(), this.descriptorLength());\n        }\n        extensionSource() {\n            return getASCIIString(this._data, 8 + this.identifierLength() + this.descriptorLength(), this.sourceLength());\n        }\n    }\n    /**\n     * @hidden\n     */\n    class ESEntry extends SystemUseEntry {\n        constructor(data) {\n            super(data);\n        }\n        extensionSequence() {\n            return this._data[4];\n        }\n    }\n    /**\n     * RockRidge: Marks that RockRidge is in use [deprecated]\n     * @hidden\n     */\n    class RREntry extends SystemUseEntry {\n        constructor(data) {\n            super(data);\n        }\n    }\n    /**\n     * RockRidge: Records POSIX file attributes.\n     * @hidden\n     */\n    class PXEntry extends SystemUseEntry {\n        constructor(data) {\n            super(data);\n        }\n        mode() {\n            return this._data.readUInt32LE(4);\n        }\n        fileLinks() {\n            return this._data.readUInt32LE(12);\n        }\n        uid() {\n            return this._data.readUInt32LE(20);\n        }\n        gid() {\n            return this._data.readUInt32LE(28);\n        }\n        inode() {\n            return this._data.readUInt32LE(36);\n        }\n    }\n    /**\n     * RockRidge: Records POSIX device number.\n     * @hidden\n     */\n    class PNEntry extends SystemUseEntry {\n        constructor(data) {\n            super(data);\n        }\n        devTHigh() {\n            return this._data.readUInt32LE(4);\n        }\n        devTLow() {\n            return this._data.readUInt32LE(12);\n        }\n    }\n    /**\n     * RockRidge: Records symbolic link\n     * @hidden\n     */\n    class SLEntry extends SystemUseEntry {\n        constructor(data) {\n            super(data);\n        }\n        flags() {\n            return this._data[4];\n        }\n        continueFlag() {\n            return this.flags() & 0x1;\n        }\n        componentRecords() {\n            const records = new Array();\n            let i = 5;\n            while (i < this.length()) {\n                const record = new SLComponentRecord(this._data.slice(i));\n                records.push(record);\n                i += record.length();\n            }\n            return records;\n        }\n    }\n    /**\n     * @hidden\n     */\n    class SLComponentRecord {\n        constructor(data) {\n            this._data = data;\n        }\n        flags() {\n            return this._data[0];\n        }\n        length() {\n            return 2 + this.componentLength();\n        }\n        componentLength() {\n            return this._data[1];\n        }\n        content(getString) {\n            return getString(this._data, 2, this.componentLength());\n        }\n    }\n    /**\n     * RockRidge: Records alternate file name\n     * @hidden\n     */\n    class NMEntry extends SystemUseEntry {\n        constructor(data) {\n            super(data);\n        }\n        flags() {\n            return this._data[4];\n        }\n        name(getString) {\n            return getString(this._data, 5, this.length() - 5);\n        }\n    }\n    /**\n     * RockRidge: Records child link\n     * @hidden\n     */\n    class CLEntry extends SystemUseEntry {\n        constructor(data) {\n            super(data);\n        }\n        childDirectoryLba() {\n            return this._data.readUInt32LE(4);\n        }\n    }\n    /**\n     * RockRidge: Records parent link.\n     * @hidden\n     */\n    class PLEntry extends SystemUseEntry {\n        constructor(data) {\n            super(data);\n        }\n        parentDirectoryLba() {\n            return this._data.readUInt32LE(4);\n        }\n    }\n    /**\n     * RockRidge: Records relocated directory.\n     * @hidden\n     */\n    class REEntry extends SystemUseEntry {\n        constructor(data) {\n            super(data);\n        }\n    }\n    /**\n     * RockRidge: Records file timestamps\n     * @hidden\n     */\n    class TFEntry extends SystemUseEntry {\n        constructor(data) {\n            super(data);\n        }\n        flags() {\n            return this._data[4];\n        }\n        creation() {\n            if (this.flags() & 1 /* CREATION */) {\n                if (this._longFormDates()) {\n                    return getDate(this._data, 5);\n                }\n                else {\n                    return getShortFormDate(this._data, 5);\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        modify() {\n            if (this.flags() & 2 /* MODIFY */) {\n                const previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;\n                if (this._longFormDates) {\n                    return getDate(this._data, 5 + (previousDates * 17));\n                }\n                else {\n                    return getShortFormDate(this._data, 5 + (previousDates * 7));\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        access() {\n            if (this.flags() & 4 /* ACCESS */) {\n                let previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;\n                previousDates += (this.flags() & 2 /* MODIFY */) ? 1 : 0;\n                if (this._longFormDates) {\n                    return getDate(this._data, 5 + (previousDates * 17));\n                }\n                else {\n                    return getShortFormDate(this._data, 5 + (previousDates * 7));\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        backup() {\n            if (this.flags() & 16 /* BACKUP */) {\n                let previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;\n                previousDates += (this.flags() & 2 /* MODIFY */) ? 1 : 0;\n                previousDates += (this.flags() & 4 /* ACCESS */) ? 1 : 0;\n                if (this._longFormDates) {\n                    return getDate(this._data, 5 + (previousDates * 17));\n                }\n                else {\n                    return getShortFormDate(this._data, 5 + (previousDates * 7));\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        expiration() {\n            if (this.flags() & 32 /* EXPIRATION */) {\n                let previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;\n                previousDates += (this.flags() & 2 /* MODIFY */) ? 1 : 0;\n                previousDates += (this.flags() & 4 /* ACCESS */) ? 1 : 0;\n                previousDates += (this.flags() & 16 /* BACKUP */) ? 1 : 0;\n                if (this._longFormDates) {\n                    return getDate(this._data, 5 + (previousDates * 17));\n                }\n                else {\n                    return getShortFormDate(this._data, 5 + (previousDates * 7));\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        effective() {\n            if (this.flags() & 64 /* EFFECTIVE */) {\n                let previousDates = (this.flags() & 1 /* CREATION */) ? 1 : 0;\n                previousDates += (this.flags() & 2 /* MODIFY */) ? 1 : 0;\n                previousDates += (this.flags() & 4 /* ACCESS */) ? 1 : 0;\n                previousDates += (this.flags() & 16 /* BACKUP */) ? 1 : 0;\n                previousDates += (this.flags() & 32 /* EXPIRATION */) ? 1 : 0;\n                if (this._longFormDates) {\n                    return getDate(this._data, 5 + (previousDates * 17));\n                }\n                else {\n                    return getShortFormDate(this._data, 5 + (previousDates * 7));\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        _longFormDates() {\n            return !!(this.flags() && 128 /* LONG_FORM */);\n        }\n    }\n    /**\n     * RockRidge: File data in sparse format.\n     * @hidden\n     */\n    class SFEntry extends SystemUseEntry {\n        constructor(data) {\n            super(data);\n        }\n        virtualSizeHigh() {\n            return this._data.readUInt32LE(4);\n        }\n        virtualSizeLow() {\n            return this._data.readUInt32LE(12);\n        }\n        tableDepth() {\n            return this._data[20];\n        }\n    }\n    /**\n     * @hidden\n     */\n    class Directory {\n        constructor(record, isoData) {\n            this._fileList = [];\n            this._fileMap = {};\n            this._record = record;\n            let i = record.lba();\n            let iLimit = i + record.dataLength();\n            if (!(record.fileFlags() & 2 /* Directory */)) {\n                // Must have a CL entry.\n                const cl = record.getSUEntries(isoData).filter((e) => e instanceof CLEntry)[0];\n                i = cl.childDirectoryLba() * 2048;\n                iLimit = Infinity;\n            }\n            while (i < iLimit) {\n                const len = isoData[i];\n                // Zero-padding between sectors.\n                // TODO: Could optimize this to seek to nearest-sector upon\n                // seeing a 0.\n                if (len === 0) {\n                    i++;\n                    continue;\n                }\n                const r = this._constructDirectoryRecord(isoData.slice(i));\n                const fname = r.fileName(isoData);\n                // Skip '.' and '..' entries.\n                if (fname !== '\\u0000' && fname !== '\\u0001') {\n                    // Skip relocated entries.\n                    if (!r.hasRockRidge() || r.getSUEntries(isoData).filter((e) => e instanceof REEntry).length === 0) {\n                        this._fileMap[fname] = r;\n                        this._fileList.push(fname);\n                    }\n                }\n                else if (iLimit === Infinity) {\n                    // First entry contains needed data.\n                    iLimit = i + r.dataLength();\n                }\n                i += r.length();\n            }\n        }\n        /**\n         * Get the record with the given name.\n         * Returns undefined if not present.\n         */\n        getRecord(name) {\n            return this._fileMap[name];\n        }\n        getFileList() {\n            return this._fileList;\n        }\n        getDotEntry(isoData) {\n            return this._constructDirectoryRecord(isoData.slice(this._record.lba()));\n        }\n    }\n    /**\n     * @hidden\n     */\n    class ISODirectory extends Directory {\n        constructor(record, isoData) {\n            super(record, isoData);\n        }\n        _constructDirectoryRecord(data) {\n            return new ISODirectoryRecord(data, this._record.getRockRidgeOffset());\n        }\n    }\n    /**\n     * @hidden\n     */\n    class JolietDirectory extends Directory {\n        constructor(record, isoData) {\n            super(record, isoData);\n        }\n        _constructDirectoryRecord(data) {\n            return new JolietDirectoryRecord(data, this._record.getRockRidgeOffset());\n        }\n    }\n    /**\n     * Mounts an ISO file as a read-only file system.\n     *\n     * Supports:\n     * * Vanilla ISO9660 ISOs\n     * * Microsoft Joliet and Rock Ridge extensions to the ISO9660 standard\n     */\n    class IsoFS extends SynchronousFileSystem {\n        /**\n         * **Deprecated. Please use IsoFS.Create() method instead.**\n         *\n         * Constructs a read-only file system from the given ISO.\n         * @param data The ISO file in a buffer.\n         * @param name The name of the ISO (optional; used for debug messages / identification via getName()).\n         */\n        constructor(data, name = \"\") {\n            super();\n            this._data = data;\n            // Skip first 16 sectors.\n            let vdTerminatorFound = false;\n            let i = 16 * 2048;\n            const candidateVDs = new Array();\n            while (!vdTerminatorFound) {\n                const slice = data.slice(i);\n                const vd = new VolumeDescriptor(slice);\n                switch (vd.type()) {\n                    case 1 /* PrimaryVolumeDescriptor */:\n                        candidateVDs.push(new PrimaryVolumeDescriptor(slice));\n                        break;\n                    case 2 /* SupplementaryVolumeDescriptor */:\n                        candidateVDs.push(new SupplementaryVolumeDescriptor(slice));\n                        break;\n                    case 255 /* VolumeDescriptorSetTerminator */:\n                        vdTerminatorFound = true;\n                        break;\n                }\n                i += 2048;\n            }\n            if (candidateVDs.length === 0) {\n                throw new ApiError(ErrorCode.EIO, `Unable to find a suitable volume descriptor.`);\n            }\n            candidateVDs.forEach((v) => {\n                // Take an SVD over a PVD.\n                if (!this._pvd || this._pvd.type() !== 2 /* SupplementaryVolumeDescriptor */) {\n                    this._pvd = v;\n                }\n            });\n            this._root = this._pvd.rootDirectoryEntry(data);\n            this._name = name;\n        }\n        /**\n         * Creates an IsoFS instance with the given options.\n         */\n        static Create(opts, cb) {\n            try {\n                cb(null, new IsoFS(opts.data, opts.name));\n            }\n            catch (e) {\n                cb(e);\n            }\n        }\n        static isAvailable() {\n            return true;\n        }\n        getName() {\n            let name = `IsoFS${this._name}${this._pvd ? `-${this._pvd.name()}` : ''}`;\n            if (this._root && this._root.hasRockRidge()) {\n                name += `-RockRidge`;\n            }\n            return name;\n        }\n        diskSpace(path, cb) {\n            // Read-only file system.\n            cb(this._data.length, 0);\n        }\n        isReadOnly() {\n            return true;\n        }\n        supportsLinks() {\n            return false;\n        }\n        supportsProps() {\n            return false;\n        }\n        supportsSynch() {\n            return true;\n        }\n        statSync(p, isLstat) {\n            const record = this._getDirectoryRecord(p);\n            if (record === null) {\n                throw ApiError.ENOENT(p);\n            }\n            return this._getStats(p, record);\n        }\n        openSync(p, flags, mode) {\n            // INVARIANT: Cannot write to RO file systems.\n            if (flags.isWriteable()) {\n                throw new ApiError(ErrorCode.EPERM, p);\n            }\n            // Check if the path exists, and is a file.\n            const record = this._getDirectoryRecord(p);\n            if (!record) {\n                throw ApiError.ENOENT(p);\n            }\n            else if (record.isSymlink(this._data)) {\n                return this.openSync(path.resolve(p, record.getSymlinkPath(this._data)), flags, mode);\n            }\n            else if (!record.isDirectory(this._data)) {\n                const data = record.getFile(this._data);\n                const stats = this._getStats(p, record);\n                switch (flags.pathExistsAction()) {\n                    case ActionType.THROW_EXCEPTION:\n                    case ActionType.TRUNCATE_FILE:\n                        throw ApiError.EEXIST(p);\n                    case ActionType.NOP:\n                        return new NoSyncFile(this, p, flags, stats, data);\n                    default:\n                        throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');\n                }\n            }\n            else {\n                throw ApiError.EISDIR(p);\n            }\n        }\n        readdirSync(path) {\n            // Check if it exists.\n            const record = this._getDirectoryRecord(path);\n            if (!record) {\n                throw ApiError.ENOENT(path);\n            }\n            else if (record.isDirectory(this._data)) {\n                return record.getDirectory(this._data).getFileList().slice(0);\n            }\n            else {\n                throw ApiError.ENOTDIR(path);\n            }\n        }\n        /**\n         * Specially-optimized readfile.\n         */\n        readFileSync(fname, encoding, flag) {\n            // Get file.\n            const fd = this.openSync(fname, flag, 0x1a4);\n            try {\n                const fdCast = fd;\n                const fdBuff = fdCast.getBuffer();\n                if (encoding === null) {\n                    return copyingSlice(fdBuff);\n                }\n                return fdBuff.toString(encoding);\n            }\n            finally {\n                fd.closeSync();\n            }\n        }\n        _getDirectoryRecord(path) {\n            // Special case.\n            if (path === '/') {\n                return this._root;\n            }\n            const components = path.split('/').slice(1);\n            let dir = this._root;\n            for (const component of components) {\n                if (dir.isDirectory(this._data)) {\n                    dir = dir.getDirectory(this._data).getRecord(component);\n                    if (!dir) {\n                        return null;\n                    }\n                }\n                else {\n                    return null;\n                }\n            }\n            return dir;\n        }\n        _getStats(p, record) {\n            if (record.isSymlink(this._data)) {\n                const newP = path.resolve(p, record.getSymlinkPath(this._data));\n                const dirRec = this._getDirectoryRecord(newP);\n                if (!dirRec) {\n                    return null;\n                }\n                return this._getStats(newP, dirRec);\n            }\n            else {\n                const len = record.dataLength();\n                let mode = 0x16D;\n                const date = record.recordingDate().getTime();\n                let atime = date;\n                let mtime = date;\n                let ctime = date;\n                if (record.hasRockRidge()) {\n                    const entries = record.getSUEntries(this._data);\n                    for (const entry of entries) {\n                        if (entry instanceof PXEntry) {\n                            mode = entry.mode();\n                        }\n                        else if (entry instanceof TFEntry) {\n                            const flags = entry.flags();\n                            if (flags & 4 /* ACCESS */) {\n                                atime = entry.access().getTime();\n                            }\n                            if (flags & 2 /* MODIFY */) {\n                                mtime = entry.modify().getTime();\n                            }\n                            if (flags & 1 /* CREATION */) {\n                                ctime = entry.creation().getTime();\n                            }\n                        }\n                    }\n                }\n                // Mask out writeable flags. This is a RO file system.\n                mode = mode & 0x16D;\n                return new Stats(record.isDirectory(this._data) ? FileType.DIRECTORY : FileType.FILE, len, mode, atime, mtime, ctime);\n            }\n        }\n    }\n    IsoFS.Name = \"IsoFS\";\n    IsoFS.Options = {\n        data: {\n            type: \"object\",\n            description: \"The ISO file in a buffer\",\n            validator: bufferValidator\n        }\n    };\n\n\n    return IsoFS;\n});"]}