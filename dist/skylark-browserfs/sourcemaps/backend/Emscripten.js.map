{"version":3,"sources":["backend/Emscripten.js"],"names":["define","file_system","node_fs_stats","file","util","api_error","SynchronousFileSystem","Stats","FileType","BaseFile","uint8Array2Buffer","buffer2Uint8array","ApiError","ErrorCode","ErrorStrings","convertError","e","path","errno","parent","node","paths","unshift","name","length","join","EmscriptenFile","[object Object]","_fs","_FS","_path","_stream","super","this","cb","err","closeSync","close","statSync","len","truncateSync","ftruncate","fd","buffer","offset","position","writeSync","u8","emPosition","undefined","write","readSync","read","uid","gid","chownSync","fchown","mode","chmodSync","fchmod","atime","mtime","utimesSync","EmscriptenFileSystem","opts","FS","DB_NAME","oldPath","newPath","rename","ENOENT","existsSync","p","isLstat","stats","lstat","stat","itemType","modeToFileType","size","getTime","ctime","flag","stream","open","getFlagString","isDir","EISDIR","unlink","rmdir","mkdir","readdir","filter","truncate","encoding","data","readFile","flags","buff","toString","Buffer","from","writeFile","chmod","isLchmod","lchmod","isLchown","lchown","chown","srcpath","dstpath","type","symlink","readlink","utime","DIRECTORY","isFile","FILE","isLink","SYMLINK","EPERM","Name","Options","description"],"mappings":"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","file":"../../backend/Emscripten.js","sourcesContent":["define([\n    '../core/file_system',\n    '../core/node_fs_stats',\n    '../core/file',\n    '../core/util',\n    '../core/api_error'\n], function (file_system, node_fs_stats, file, util, api_error) {\n    'use strict';\n\n    const { SynchronousFileSystem } = file_system;\n    const { Stats, FileType } = node_fs_stats;\n    const { BaseFile } = file;\n    const { uint8Array2Buffer, buffer2Uint8array } = util;\n    const { ApiError, ErrorCode, ErrorStrings } = api_error;\n\n    /**\n     * @hidden\n     */\n    function convertError(e, path = '') {\n        const errno = e.errno;\n        let parent = e.node;\n        const paths = [];\n        while (parent) {\n            paths.unshift(parent.name);\n            if (parent === parent.parent) {\n                break;\n            }\n            parent = parent.parent;\n        }\n        return new ApiError(errno, ErrorStrings[errno], paths.length > 0 ? '/' + paths.join('/') : path);\n    }\n    class EmscriptenFile extends BaseFile {\n        constructor(_fs, _FS, _path, _stream) {\n            super();\n            this._fs = _fs;\n            this._FS = _FS;\n            this._path = _path;\n            this._stream = _stream;\n        }\n        getPos() {\n            return undefined;\n        }\n        close(cb) {\n            let err = null;\n            try {\n                this.closeSync();\n            }\n            catch (e) {\n                err = e;\n            }\n            finally {\n                cb(err);\n            }\n        }\n        closeSync() {\n            try {\n                this._FS.close(this._stream);\n            }\n            catch (e) {\n                throw convertError(e, this._path);\n            }\n        }\n        stat(cb) {\n            try {\n                cb(null, this.statSync());\n            }\n            catch (e) {\n                cb(e);\n            }\n        }\n        statSync() {\n            try {\n                return this._fs.statSync(this._path, false);\n            }\n            catch (e) {\n                throw convertError(e, this._path);\n            }\n        }\n        truncate(len, cb) {\n            let err = null;\n            try {\n                this.truncateSync(len);\n            }\n            catch (e) {\n                err = e;\n            }\n            finally {\n                cb(err);\n            }\n        }\n        truncateSync(len) {\n            try {\n                this._FS.ftruncate(this._stream.fd, len);\n            }\n            catch (e) {\n                throw convertError(e, this._path);\n            }\n        }\n        write(buffer, offset, length, position, cb) {\n            try {\n                cb(null, this.writeSync(buffer, offset, length, position), buffer);\n            }\n            catch (e) {\n                cb(e);\n            }\n        }\n        writeSync(buffer, offset, length, position) {\n            try {\n                const u8 = buffer2Uint8array(buffer);\n                // Emscripten is particular about what position is set to.\n                const emPosition = position === null ? undefined : position;\n                return this._FS.write(this._stream, u8, offset, length, emPosition);\n            }\n            catch (e) {\n                throw convertError(e, this._path);\n            }\n        }\n        read(buffer, offset, length, position, cb) {\n            try {\n                cb(null, this.readSync(buffer, offset, length, position), buffer);\n            }\n            catch (e) {\n                cb(e);\n            }\n        }\n        readSync(buffer, offset, length, position) {\n            try {\n                const u8 = buffer2Uint8array(buffer);\n                // Emscripten is particular about what position is set to.\n                const emPosition = position === null ? undefined : position;\n                return this._FS.read(this._stream, u8, offset, length, emPosition);\n            }\n            catch (e) {\n                throw convertError(e, this._path);\n            }\n        }\n        sync(cb) {\n            // NOP.\n            cb();\n        }\n        syncSync() {\n            // NOP.\n        }\n        chown(uid, gid, cb) {\n            let err = null;\n            try {\n                this.chownSync(uid, gid);\n            }\n            catch (e) {\n                err = e;\n            }\n            finally {\n                cb(err);\n            }\n        }\n        chownSync(uid, gid) {\n            try {\n                this._FS.fchown(this._stream.fd, uid, gid);\n            }\n            catch (e) {\n                throw convertError(e, this._path);\n            }\n        }\n        chmod(mode, cb) {\n            let err = null;\n            try {\n                this.chmodSync(mode);\n            }\n            catch (e) {\n                err = e;\n            }\n            finally {\n                cb(err);\n            }\n        }\n        chmodSync(mode) {\n            try {\n                this._FS.fchmod(this._stream.fd, mode);\n            }\n            catch (e) {\n                throw convertError(e, this._path);\n            }\n        }\n        utimes(atime, mtime, cb) {\n            let err = null;\n            try {\n                this.utimesSync(atime, mtime);\n            }\n            catch (e) {\n                err = e;\n            }\n            finally {\n                cb(err);\n            }\n        }\n        utimesSync(atime, mtime) {\n            this._fs.utimesSync(this._path, atime, mtime);\n        }\n    }\n    /**\n     * Mounts an Emscripten file system into the BrowserFS file system.\n     */\n    class EmscriptenFileSystem extends SynchronousFileSystem {\n        constructor(_FS) {\n            super();\n            this._FS = _FS;\n        }\n        /**\n         * Create an EmscriptenFileSystem instance with the given options.\n         */\n        static Create(opts, cb) {\n            cb(null, new EmscriptenFileSystem(opts.FS));\n        }\n        static isAvailable() { return true; }\n        getName() { return this._FS.DB_NAME(); }\n        isReadOnly() { return false; }\n        supportsLinks() { return true; }\n        supportsProps() { return true; }\n        supportsSynch() { return true; }\n        renameSync(oldPath, newPath) {\n            try {\n                this._FS.rename(oldPath, newPath);\n            }\n            catch (e) {\n                if (e.errno === ErrorCode.ENOENT) {\n                    throw convertError(e, this.existsSync(oldPath) ? newPath : oldPath);\n                }\n                else {\n                    throw convertError(e);\n                }\n            }\n        }\n        statSync(p, isLstat) {\n            try {\n                const stats = isLstat ? this._FS.lstat(p) : this._FS.stat(p);\n                const itemType = this.modeToFileType(stats.mode);\n                return new Stats(itemType, stats.size, stats.mode, stats.atime.getTime(), stats.mtime.getTime(), stats.ctime.getTime());\n            }\n            catch (e) {\n                throw convertError(e, p);\n            }\n        }\n        openSync(p, flag, mode) {\n            try {\n                const stream = this._FS.open(p, flag.getFlagString(), mode);\n                if (this._FS.isDir(stream.node.mode)) {\n                    this._FS.close(stream);\n                    throw ApiError.EISDIR(p);\n                }\n                return new EmscriptenFile(this, this._FS, p, stream);\n            }\n            catch (e) {\n                throw convertError(e, p);\n            }\n        }\n        unlinkSync(p) {\n            try {\n                this._FS.unlink(p);\n            }\n            catch (e) {\n                throw convertError(e, p);\n            }\n        }\n        rmdirSync(p) {\n            try {\n                this._FS.rmdir(p);\n            }\n            catch (e) {\n                throw convertError(e, p);\n            }\n        }\n        mkdirSync(p, mode) {\n            try {\n                this._FS.mkdir(p, mode);\n            }\n            catch (e) {\n                throw convertError(e, p);\n            }\n        }\n        readdirSync(p) {\n            try {\n                // Emscripten returns items for '.' and '..'. Node does not.\n                return this._FS.readdir(p).filter((p) => p !== '.' && p !== '..');\n            }\n            catch (e) {\n                throw convertError(e, p);\n            }\n        }\n        truncateSync(p, len) {\n            try {\n                this._FS.truncate(p, len);\n            }\n            catch (e) {\n                throw convertError(e, p);\n            }\n        }\n        readFileSync(p, encoding, flag) {\n            try {\n                const data = this._FS.readFile(p, { flags: flag.getFlagString() });\n                const buff = uint8Array2Buffer(data);\n                if (encoding) {\n                    return buff.toString(encoding);\n                }\n                else {\n                    return buff;\n                }\n            }\n            catch (e) {\n                throw convertError(e, p);\n            }\n        }\n        writeFileSync(p, data, encoding, flag, mode) {\n            try {\n                if (encoding) {\n                    data = Buffer.from(data, encoding);\n                }\n                const u8 = buffer2Uint8array(data);\n                this._FS.writeFile(p, u8, { flags: flag.getFlagString(), encoding: 'binary' });\n                this._FS.chmod(p, mode);\n            }\n            catch (e) {\n                throw convertError(e, p);\n            }\n        }\n        chmodSync(p, isLchmod, mode) {\n            try {\n                isLchmod ? this._FS.lchmod(p, mode) : this._FS.chmod(p, mode);\n            }\n            catch (e) {\n                throw convertError(e, p);\n            }\n        }\n        chownSync(p, isLchown, uid, gid) {\n            try {\n                isLchown ? this._FS.lchown(p, uid, gid) : this._FS.chown(p, uid, gid);\n            }\n            catch (e) {\n                throw convertError(e, p);\n            }\n        }\n        symlinkSync(srcpath, dstpath, type) {\n            try {\n                this._FS.symlink(srcpath, dstpath);\n            }\n            catch (e) {\n                throw convertError(e);\n            }\n        }\n        readlinkSync(p) {\n            try {\n                return this._FS.readlink(p);\n            }\n            catch (e) {\n                throw convertError(e, p);\n            }\n        }\n        utimesSync(p, atime, mtime) {\n            try {\n                this._FS.utime(p, atime.getTime(), mtime.getTime());\n            }\n            catch (e) {\n                throw convertError(e, p);\n            }\n        }\n        modeToFileType(mode) {\n            if (this._FS.isDir(mode)) {\n                return FileType.DIRECTORY;\n            }\n            else if (this._FS.isFile(mode)) {\n                return FileType.FILE;\n            }\n            else if (this._FS.isLink(mode)) {\n                return FileType.SYMLINK;\n            }\n            else {\n                throw ApiError.EPERM(`Invalid mode: ${mode}`);\n            }\n        }\n    }\n    EmscriptenFileSystem.Name = \"EmscriptenFileSystem\";\n    EmscriptenFileSystem.Options = {\n        FS: {\n            type: \"object\",\n            description: \"The Emscripten file system to use (the `FS` variable)\"\n        }\n    };\n\n    EmscriptenFileSystem.EmscriptenFile = EmscriptenFile;\n\n    return EmscriptenFileSystem;\n});"]}