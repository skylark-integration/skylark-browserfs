{"version":3,"sources":["backend/LocalStorage.js"],"names":["define","key_value_filesystem","api_error","global","buffer","SyncKeyValueFileSystem","SimpleSyncRWTransaction","ApiError","ErrorCode","Buffer","binaryEncoding","supportsBinaryString","localStorage","setItem","String","fromCharCode","getItem","e","isEncoding","LocalStorageStore","[object Object]","LocalStorageFileSystem","Name","clear","type","this","key","data","from","overwrite","toString","ENOSPC","removeItem","EIO","super","store","options","cb","Options"],"mappings":";;;;;;;AAAAA,QACI,kCACA,oBACA,iBACA,kBACD,SAAUC,EAAsBC,EAAWC,EAAOC,GACjD,aAEA,MAAMC,uBAAEA,EAAsBC,wBAAEA,GAA4BL,GACtDM,SAAEA,EAAQC,UAAEA,GAAcN,GAE1BO,OAAEA,GAAUL,EAQlB,IAAkCM,EAA9BC,GAAuB,EAC3B,IACIR,EAAOS,aAAaC,QAAQ,WAAYC,OAAOC,aAAa,QAC5DJ,EAAuBR,EAAOS,aAAaI,QAAQ,cAAgBF,OAAOC,aAAa,OAE3F,MAAOE,GAEHN,GAAuB,EAE3BD,EAAiBC,EAAuB,gBAAkB,mBACrDF,EAAOS,WAAWR,KAGnBA,EAAiB,gBAKfS,EACFC,OACI,OAAOC,EAAuBC,KAElCF,QACIjB,EAAOS,aAAaW,QAExBH,iBAAiBI,GAEb,OAAO,IAAIlB,EAAwBmB,MAEvCL,IAAIM,GACA,IACI,MAAMC,EAAOxB,EAAOS,aAAaI,QAAQU,GACzC,GAAa,OAATC,EACA,OAAOlB,EAAOmB,KAAKD,EAAMjB,GAGjC,MAAOO,KAMXG,IAAIM,EAAKC,EAAME,GACX,IACI,SAAKA,GAAkD,OAArC1B,EAAOS,aAAaI,QAAQU,MAI9CvB,EAAOS,aAAaC,QAAQa,EAAKC,EAAKG,SAASpB,KACxC,GAEX,MAAOO,GACH,MAAM,IAAIV,EAASC,EAAUuB,OAAQ,0BAG7CX,IAAIM,GACA,IACIvB,EAAOS,aAAaoB,WAAWN,GAEnC,MAAOT,GACH,MAAM,IAAIV,EAASC,EAAUyB,IAAK,wBAA0BP,EAAM,KAAOT,WAQ/EI,UAA+BhB,EAIjCe,cAAgBc,OAAQC,MAAO,IAAIhB,IAInCC,cAAcgB,EAASC,GACnBA,EAAG,KAAM,IAAIhB,GAEjBD,qBACI,YAAsC,IAAxBjB,EAAOS,cAQ7B,OALAS,EAAuBC,KAAO,eAC9BD,EAAuBiB,WAEvBjB,EAAuBF,kBAAoBA,EAEpCE","file":"../../backend/LocalStorage.js","sourcesContent":["define([\n    '../generic/key_value_filesystem',\n    '../core/api_error',\n    '../core/global',\n    \"../libs/buffer\"\n], function (key_value_filesystem, api_error, global,buffer) {\n    'use strict';\n\n    const { SyncKeyValueFileSystem, SimpleSyncRWTransaction } = key_value_filesystem;\n    const { ApiError, ErrorCode } = api_error;\n\n    const { Buffer} = buffer;\n\n    /**\n     * Some versions of FF and all versions of IE do not support the full range of\n     * 16-bit numbers encoded as characters, as they enforce UTF-16 restrictions.\n     * @url http://stackoverflow.com/questions/11170716/are-there-any-characters-that-are-not-allowed-in-localstorage/11173673#11173673\n     * @hidden\n     */\n    let supportsBinaryString = false, binaryEncoding;\n    try {\n        global.localStorage.setItem(\"__test__\", String.fromCharCode(0xD800));\n        supportsBinaryString = global.localStorage.getItem(\"__test__\") === String.fromCharCode(0xD800);\n    }\n    catch (e) {\n        // IE throws an exception.\n        supportsBinaryString = false;\n    }\n    binaryEncoding = supportsBinaryString ? 'binary_string' : 'binary_string_ie';\n    if (!Buffer.isEncoding(binaryEncoding)) {\n        // Fallback for non BrowserFS implementations of buffer that lack a\n        // binary_string format.\n        binaryEncoding = \"base64\";\n    }\n    /**\n     * A synchronous key-value store backed by localStorage.\n     */\n    class LocalStorageStore {\n        name() {\n            return LocalStorageFileSystem.Name;\n        }\n        clear() {\n            global.localStorage.clear();\n        }\n        beginTransaction(type) {\n            // No need to differentiate.\n            return new SimpleSyncRWTransaction(this);\n        }\n        get(key) {\n            try {\n                const data = global.localStorage.getItem(key);\n                if (data !== null) {\n                    return Buffer.from(data, binaryEncoding);\n                }\n            }\n            catch (e) {\n                // Do nothing.\n            }\n            // Key doesn't exist, or a failure occurred.\n            return undefined;\n        }\n        put(key, data, overwrite) {\n            try {\n                if (!overwrite && global.localStorage.getItem(key) !== null) {\n                    // Don't want to overwrite the key!\n                    return false;\n                }\n                global.localStorage.setItem(key, data.toString(binaryEncoding));\n                return true;\n            }\n            catch (e) {\n                throw new ApiError(ErrorCode.ENOSPC, \"LocalStorage is full.\");\n            }\n        }\n        del(key) {\n            try {\n                global.localStorage.removeItem(key);\n            }\n            catch (e) {\n                throw new ApiError(ErrorCode.EIO, \"Unable to delete key \" + key + \": \" + e);\n            }\n        }\n    }\n    /**\n     * A synchronous file system backed by localStorage. Connects our\n     * LocalStorageStore to our SyncKeyValueFileSystem.\n     */\n    class LocalStorageFileSystem extends SyncKeyValueFileSystem {\n        /**\n         * Creates a new LocalStorage file system using the contents of `localStorage`.\n         */\n        constructor() { super({ store: new LocalStorageStore() }); }\n        /**\n         * Creates a LocalStorageFileSystem instance.\n         */\n        static Create(options, cb) {\n            cb(null, new LocalStorageFileSystem());\n        }\n        static isAvailable() {\n            return typeof global.localStorage !== 'undefined';\n        }\n    }\n    LocalStorageFileSystem.Name = \"LocalStorage\";\n    LocalStorageFileSystem.Options = {};\n    \n    LocalStorageFileSystem.LocalStorageStore = LocalStorageStore;\n\n    return LocalStorageFileSystem;\n});"]}