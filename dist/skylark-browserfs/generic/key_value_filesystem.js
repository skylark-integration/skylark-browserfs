/**
 * skylark-browserfs - A version of browserfs that ported to running on skylarkjs.
 * @author 
 * @version v0.9.0
 * @link 
 * @license MIT
 */
define(["../core/file_system","../core/api_error","../core/node_fs_stats","../libs/path","../generic/inode","../generic/preload_file","../core/util"],function(t,e,i,s,r,n,o){"use strict";const{BaseFileSystem:a,SynchronousFileSystem:h}=t,{ApiError:c,ErrorCode:d}=e,{FileType:l}=i,{emptyBuffer:u}=o,{PreloadFile:f}=n,m="/";let y=null;function g(){return y||(y=Buffer.from("{}"))}function N(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){const e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)})}function p(t,e){return!t||(e(t),!1)}function w(t,e,i){return!t||(e.abort(()=>{i(t)}),!1)}class E{constructor(t,e){this.key=t,this.value=e,this.prev=null,this.next=null}}class I{constructor(t){this.limit=t,this.size=0,this.map={},this.head=null,this.tail=null}set(t,e){const i=new E(t,e);this.map[t]?(this.map[t].value=i.value,this.remove(i.key)):this.size>=this.limit&&(delete this.map[this.tail.key],this.size--,this.tail=this.tail.prev,this.tail.next=null),this.setHead(i)}get(t){if(this.map[t]){const e=this.map[t].value,i=new E(t,e);return this.remove(t),this.setHead(i),e}return null}remove(t){const e=this.map[t];e&&(null!==e.prev?e.prev.next=e.next:this.head=e.next,null!==e.next?e.next.prev=e.prev:this.tail=e.prev,delete this.map[t],this.size--)}removeAll(){this.size=0,this.map={},this.head=null,this.tail=null}setHead(t){t.next=this.head,t.prev=null,null!==this.head&&(this.head.prev=t),this.head=t,null===this.tail&&(this.tail=t),this.size++,this.map[t.key]=t}}class S extends f{constructor(t,e,i,s,r){super(t,e,i,s,r)}syncSync(){this.isDirty()&&(this._fs._syncSync(this.getPath(),this.getBuffer(),this.getStats()),this.resetDirty())}closeSync(){this.syncSync()}}class b extends f{constructor(t,e,i,s,r){super(t,e,i,s,r)}sync(t){this.isDirty()?this._fs._sync(this.getPath(),this.getBuffer(),this.getStats(),e=>{e||this.resetDirty(),t(e)}):t()}close(t){this.sync(t)}}return{SimpleSyncRWTransaction:class{constructor(t){this.store=t,this.originalData={},this.modifiedKeys=[]}get(t){const e=this.store.get(t);return this.stashOldValue(t,e),e}put(t,e,i){return this.markModified(t),this.store.put(t,e,i)}del(t){this.markModified(t),this.store.del(t)}commit(){}abort(){for(const t of this.modifiedKeys){const e=this.originalData[t];e?this.store.put(t,e,!0):this.store.del(t)}}stashOldValue(t,e){this.originalData.hasOwnProperty(t)||(this.originalData[t]=e)}markModified(t){-1===this.modifiedKeys.indexOf(t)&&(this.modifiedKeys.push(t),this.originalData.hasOwnProperty(t)||(this.originalData[t]=this.store.get(t)))}},SyncKeyValueFile:S,SyncKeyValueFileSystem:class extends h{static isAvailable(){return!0}constructor(t){super(),this.store=t.store,this.makeRootDirectory()}getName(){return this.store.name()}isReadOnly(){return!1}supportsSymlinks(){return!1}supportsProps(){return!1}supportsSynch(){return!0}empty(){this.store.clear(),this.makeRootDirectory()}renameSync(t,e){const i=this.store.beginTransaction("readwrite"),r=s.dirname(t),n=s.basename(t),o=s.dirname(e),a=s.basename(e),h=this.findINode(i,r),l=this.getDirListing(i,r,h);if(!l[n])throw c.ENOENT(t);const u=l[n];if(delete l[n],0===(o+"/").indexOf(t+"/"))throw new c(d.EBUSY,r);let f,m;if(o===r?(f=h,m=l):(f=this.findINode(i,o),m=this.getDirListing(i,o,f)),m[a]){const t=this.getINode(i,e,m[a]);if(!t.isFile())throw c.EPERM(e);try{i.del(t.id),i.del(m[a])}catch(t){throw i.abort(),t}}m[a]=u;try{i.put(h.id,Buffer.from(JSON.stringify(l)),!0),i.put(f.id,Buffer.from(JSON.stringify(m)),!0)}catch(t){throw i.abort(),t}i.commit()}statSync(t,e){return this.findINode(this.store.beginTransaction("readonly"),t).toStats()}createFileSync(t,e,i){const s=this.store.beginTransaction("readwrite"),r=u(),n=this.commitNewFile(s,t,l.FILE,i,r);return new S(this,t,e,n.toStats(),r)}openFileSync(t,e){const i=this.store.beginTransaction("readonly"),s=this.findINode(i,t),r=i.get(s.id);if(void 0===r)throw c.ENOENT(t);return new S(this,t,e,s.toStats(),r)}unlinkSync(t){this.removeEntry(t,!1)}rmdirSync(t){if(this.readdirSync(t).length>0)throw c.ENOTEMPTY(t);this.removeEntry(t,!0)}mkdirSync(t,e){const i=this.store.beginTransaction("readwrite"),s=Buffer.from("{}");this.commitNewFile(i,t,l.DIRECTORY,e,s)}readdirSync(t){const e=this.store.beginTransaction("readonly");return Object.keys(this.getDirListing(e,t,this.findINode(e,t)))}_syncSync(t,e,i){const r=this.store.beginTransaction("readwrite"),n=this._findINode(r,s.dirname(t),s.basename(t)),o=this.getINode(r,t,n),a=o.update(i);try{r.put(o.id,e,!0),a&&r.put(n,o.toBuffer(),!0)}catch(t){throw r.abort(),t}r.commit()}makeRootDirectory(){const t=this.store.beginTransaction("readwrite");if(void 0===t.get(m)){const e=(new Date).getTime(),i=new r(N(),4096,511|l.DIRECTORY,e,e,e);t.put(i.id,g(),!1),t.put(m,i.toBuffer(),!1),t.commit()}}_findINode(t,e,i){const r=r=>{const n=this.getDirListing(t,e,r);if(n[i])return n[i];throw c.ENOENT(s.resolve(e,i))};return"/"===e?""===i?m:r(this.getINode(t,e,m)):r(this.getINode(t,e+s.sep+i,this._findINode(t,s.dirname(e),s.basename(e))))}findINode(t,e){return this.getINode(t,e,this._findINode(t,s.dirname(e),s.basename(e)))}getINode(t,e,i){const s=t.get(i);if(void 0===s)throw c.ENOENT(e);return r.fromBuffer(s)}getDirListing(t,e,i){if(!i.isDirectory())throw c.ENOTDIR(e);const s=t.get(i.id);if(void 0===s)throw c.ENOENT(e);return JSON.parse(s.toString())}addNewNode(t,e){let i;for(;;)try{return i=N(),t.put(i,e,!1),i}catch(t){}throw new c(d.EIO,"Unable to commit data to key-value store.")}commitNewFile(t,e,i,n,o){const a=s.dirname(e),h=s.basename(e),d=this.findINode(t,a),l=this.getDirListing(t,a,d),u=(new Date).getTime();if("/"===e)throw c.EEXIST(e);if(l[h])throw c.EEXIST(e);let f;try{const e=this.addNewNode(t,o);f=new r(e,o.length,n|i,u,u,u);const s=this.addNewNode(t,f.toBuffer());l[h]=s,t.put(d.id,Buffer.from(JSON.stringify(l)),!0)}catch(e){throw t.abort(),e}return t.commit(),f}removeEntry(t,e){const i=this.store.beginTransaction("readwrite"),r=s.dirname(t),n=this.findINode(i,r),o=this.getDirListing(i,r,n),a=s.basename(t);if(!o[a])throw c.ENOENT(t);const h=o[a];delete o[a];const d=this.getINode(i,t,h);if(!e&&d.isDirectory())throw c.EISDIR(t);if(e&&!d.isDirectory())throw c.ENOTDIR(t);try{i.del(d.id),i.del(h),i.put(n.id,Buffer.from(JSON.stringify(o)),!0)}catch(t){throw i.abort(),t}i.commit()}},AsyncKeyValueFile:b,AsyncKeyValueFileSystem:class extends a{constructor(t){super(),this._cache=null,t>0&&(this._cache=new I(t))}static isAvailable(){return!0}init(t,e){this.store=t,this.makeRootDirectory(e)}getName(){return this.store.name()}isReadOnly(){return!1}supportsSymlinks(){return!1}supportsProps(){return!1}supportsSynch(){return!1}empty(t){this._cache&&this._cache.removeAll(),this.store.clear(e=>{p(e,t)&&this.makeRootDirectory(t)})}rename(t,e,i){if(this._cache){const t=this._cache;this._cache=null,t.removeAll();const e=i;i=(i=>{this._cache=t,e(i)})}const r=this.store.beginTransaction("readwrite"),n=s.dirname(t),o=s.basename(t),a=s.dirname(e),h=s.basename(e),l={},u={};let f=!1;if(0===(a+"/").indexOf(t+"/"))return i(new c(d.EBUSY,n));const m=()=>{if(f||!u.hasOwnProperty(n)||!u.hasOwnProperty(a))return;const s=u[n],d=l[n],m=u[a],y=l[a];if(s[o]){const t=s[o];delete s[o];const l=()=>{m[h]=t,r.put(d.id,Buffer.from(JSON.stringify(s)),!0,t=>{w(t,r,i)&&(n===a?r.commit(i):r.put(y.id,Buffer.from(JSON.stringify(m)),!0,t=>{w(t,r,i)&&r.commit(i)}))})};m[h]?this.getINode(r,e,m[h],(t,s)=>{w(t,r,i)&&(s.isFile()?r.del(s.id,t=>{w(t,r,i)&&r.del(m[h],t=>{w(t,r,i)&&l()})}):r.abort(t=>{i(c.EPERM(e))}))}):l()}else i(c.ENOENT(t))},y=t=>{this.findINodeAndDirListing(r,t,(e,s,n)=>{e?f||(f=!0,r.abort(()=>{i(e)})):(l[t]=s,u[t]=n,m())})};y(n),n!==a&&y(a)}stat(t,e,i){const s=this.store.beginTransaction("readonly");this.findINode(s,t,(t,e)=>{p(t,i)&&i(null,e.toStats())})}createFile(t,e,i,s){const r=this.store.beginTransaction("readwrite"),n=u();this.commitNewFile(r,t,l.FILE,i,n,(i,r)=>{p(i,s)&&s(null,new b(this,t,e,r.toStats(),n))})}openFile(t,e,i){const s=this.store.beginTransaction("readonly");this.findINode(s,t,(r,n)=>{p(r,i)&&s.get(n.id,(s,r)=>{p(s,i)&&(void 0===r?i(c.ENOENT(t)):i(null,new b(this,t,e,n.toStats(),r)))})})}unlink(t,e){this.removeEntry(t,!1,e)}rmdir(t,e){this.readdir(t,(i,s)=>{i?e(i):s.length>0?e(c.ENOTEMPTY(t)):this.removeEntry(t,!0,e)})}mkdir(t,e,i){const s=this.store.beginTransaction("readwrite"),r=Buffer.from("{}");this.commitNewFile(s,t,l.DIRECTORY,e,r,i)}readdir(t,e){const i=this.store.beginTransaction("readonly");this.findINode(i,t,(s,r)=>{p(s,e)&&this.getDirListing(i,t,r,(t,i)=>{p(t,e)&&e(null,Object.keys(i))})})}_sync(t,e,i,r){const n=this.store.beginTransaction("readwrite");this._findINode(n,s.dirname(t),s.basename(t),(s,o)=>{w(s,n,r)&&this.getINode(n,t,o,(t,s)=>{if(w(t,n,r)){const t=s.update(i);n.put(s.id,e,!0,e=>{w(e,n,r)&&(t?n.put(o,s.toBuffer(),!0,t=>{w(t,n,r)&&n.commit(r)}):n.commit(r))})}})})}makeRootDirectory(t){const e=this.store.beginTransaction("readwrite");e.get(m,(i,s)=>{if(i||void 0===s){const i=(new Date).getTime(),s=new r(N(),4096,511|l.DIRECTORY,i,i,i);e.put(s.id,g(),!1,i=>{w(i,e,t)&&e.put(m,s.toBuffer(),!1,i=>{i?e.abort(()=>{t(i)}):e.commit(t)})})}else e.commit(t)})}_findINode(t,e,i,r){if(this._cache){const t=this._cache.get(s.join(e,i));if(t)return r(null,t)}const n=(t,n,o)=>{if(t)r(t);else if(o[i]){const t=o[i];this._cache&&this._cache.set(s.join(e,i),t),r(null,t)}else r(c.ENOENT(s.resolve(e,i)))};"/"===e?""===i?(this._cache&&this._cache.set(s.join(e,i),m),r(null,m)):this.getINode(t,e,m,(i,s)=>{p(i,r)&&this.getDirListing(t,e,s,(t,e)=>{n(t,0,e)})}):this.findINodeAndDirListing(t,e,n)}findINode(t,e,i){this._findINode(t,s.dirname(e),s.basename(e),(s,r)=>{p(s,i)&&this.getINode(t,e,r,i)})}getINode(t,e,i,s){t.get(i,(t,i)=>{p(t,s)&&(void 0===i?s(c.ENOENT(e)):s(null,r.fromBuffer(i)))})}getDirListing(t,e,i,s){i.isDirectory()?t.get(i.id,(t,i)=>{if(p(t,s))try{s(null,JSON.parse(i.toString()))}catch(t){s(c.ENOENT(e))}}):s(c.ENOTDIR(e))}findINodeAndDirListing(t,e,i){this.findINode(t,e,(s,r)=>{p(s,i)&&this.getDirListing(t,e,r,(t,e)=>{p(t,i)&&i(null,r,e)})})}addNewNode(t,e,i){let s,r=0;const n=()=>{5==++r?i(new c(d.EIO,"Unable to commit data to key-value store.")):(s=N(),t.put(s,e,!1,(t,e)=>{t||!e?n():i(null,s)}))};n()}commitNewFile(t,e,i,n,o,a){const h=s.dirname(e),d=s.basename(e),l=(new Date).getTime();if("/"===e)return a(c.EEXIST(e));this.findINodeAndDirListing(t,h,(s,h,u)=>{w(s,t,a)&&(u[d]?t.abort(()=>{a(c.EEXIST(e))}):this.addNewNode(t,o,(e,s)=>{if(w(e,t,a)){const e=new r(s,o.length,n|i,l,l,l);this.addNewNode(t,e.toBuffer(),(i,s)=>{w(i,t,a)&&(u[d]=s,t.put(h.id,Buffer.from(JSON.stringify(u)),!0,i=>{w(i,t,a)&&t.commit(i=>{w(i,t,a)&&a(null,e)})}))})}}))})}removeEntry(t,e,i){this._cache&&this._cache.remove(t);const r=this.store.beginTransaction("readwrite"),n=s.dirname(t),o=s.basename(t);this.findINodeAndDirListing(r,n,(s,n,a)=>{if(w(s,r,i))if(a[o]){const s=a[o];delete a[o],this.getINode(r,t,s,(o,h)=>{w(o,r,i)&&(!e&&h.isDirectory()?r.abort(()=>{i(c.EISDIR(t))}):e&&!h.isDirectory()?r.abort(()=>{i(c.ENOTDIR(t))}):r.del(h.id,t=>{w(t,r,i)&&r.del(s,t=>{w(t,r,i)&&r.put(n.id,Buffer.from(JSON.stringify(a)),!0,t=>{w(t,r,i)&&r.commit(i)})})}))})}else r.abort(()=>{i(c.ENOENT(t))})})}}}});
//# sourceMappingURL=../sourcemaps/generic/key_value_filesystem.js.map
