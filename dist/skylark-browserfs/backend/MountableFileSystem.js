/**
 * skylark-browserfs - A version of browserfs that ported to running on skylarkjs.
 * @author 
 * @version v0.9.0
 * @link 
 * @license MIT
 */
define(["../core/file_system","./InMemory","../core/api_error","../core/node_fs","../libs/path","../core/util"],function(t,r,n,s,e,i){"use strict";const{BaseFileSystem:o}=t,{InMemoryFileSystem:a}=r,{ApiError:h,ErrorCode:c}=n,{mkdirpSync:u}=i;class l extends o{constructor(t){super(),this.mountList=[],this.mntMap={},this.rootFs=t}static Create(t,r){a.Create({},(n,s)=>{if(s){const e=new l(s);try{Object.keys(t).forEach(r=>{e.mount(r,t[r])})}catch(n){return r(n)}r(null,e)}else r(n)})}static isAvailable(){return!0}mount(t,r){if("/"!==t[0]&&(t=`/${t}`),t=e.resolve(t),this.mntMap[t])throw new h(c.EINVAL,"Mount point "+t+" is already taken.");u(t,511,this.rootFs),this.mntMap[t]=r,this.mountList.push(t),this.mountList=this.mountList.sort((t,r)=>r.length-t.length)}umount(t){if("/"!==t[0]&&(t=`/${t}`),t=e.resolve(t),!this.mntMap[t])throw new h(c.EINVAL,"Mount point "+t+" is already unmounted.");for(delete this.mntMap[t],this.mountList.splice(this.mountList.indexOf(t),1);"/"!==t&&0===this.rootFs.readdirSync(t).length;)this.rootFs.rmdirSync(t),t=e.dirname(t)}_getFs(t){const r=this.mountList,n=r.length;for(let s=0;s<n;s++){const n=r[s];if(n.length<=t.length&&0===t.indexOf(n))return""===(t=t.substr(n.length>1?n.length:0))&&(t="/"),{fs:this.mntMap[n],path:t,mountPoint:n}}return{fs:this.rootFs,path:t,mountPoint:"/"}}getName(){return l.Name}diskSpace(t,r){r(0,0)}isReadOnly(){return!1}supportsLinks(){return!1}supportsProps(){return!1}supportsSynch(){return!0}standardizeError(t,r,n){const s=t.message.indexOf(r);return-1!==s&&(t.message=t.message.substr(0,s)+n+t.message.substr(s+r.length),t.path=n),t}rename(t,r,n){const e=this._getFs(t),i=this._getFs(r);return e.fs===i.fs?e.fs.rename(e.path,i.path,s=>{s&&this.standardizeError(this.standardizeError(s,e.path,t),i.path,r),n(s)}):s.readFile(t,function(e,i){if(e)return n(e);s.writeFile(r,i,function(r){if(r)return n(r);s.unlink(t,n)})})}renameSync(t,r){const n=this._getFs(t),e=this._getFs(r);if(n.fs===e.fs)try{return n.fs.renameSync(n.path,e.path)}catch(s){throw this.standardizeError(this.standardizeError(s,n.path,t),e.path,r),s}const i=s.readFileSync(t);return s.writeFileSync(r,i),s.unlinkSync(t)}readdirSync(t){const r=this._getFs(t);let n=null;if(r.fs!==this.rootFs)try{n=this.rootFs.readdirSync(t)}catch(t){}try{const s=r.fs.readdirSync(r.path);return null===n?s:s.concat(n.filter(t=>-1===s.indexOf(t)))}catch(s){if(null===n)throw this.standardizeError(s,r.path,t);return n}}readdir(t,r){const n=this._getFs(t);n.fs.readdir(n.path,(s,e)=>{if(n.fs!==this.rootFs)try{const i=this.rootFs.readdirSync(t);e=e?e.concat(i.filter(t=>-1===e.indexOf(t))):i}catch(e){if(s)return r(this.standardizeError(s,n.path,t))}else if(s)return r(this.standardizeError(s,n.path,t));r(null,e)})}realpathSync(t,r){const n=this._getFs(t);try{const r=n.fs.realpathSync(n.path,{});return e.resolve(e.join(n.mountPoint,r))}catch(r){throw this.standardizeError(r,n.path,t)}}realpath(t,r,n){const s=this._getFs(t);s.fs.realpath(s.path,{},(r,i)=>{r?n(this.standardizeError(r,s.path,t)):n(null,e.resolve(e.join(s.mountPoint,i)))})}rmdirSync(t){const r=this._getFs(t);if(this._containsMountPt(t))throw h.ENOTEMPTY(t);try{r.fs.rmdirSync(r.path)}catch(n){throw this.standardizeError(n,r.path,t)}}rmdir(t,r){const n=this._getFs(t);this._containsMountPt(t)?r(h.ENOTEMPTY(t)):n.fs.rmdir(n.path,s=>{r(s?this.standardizeError(s,n.path,t):null)})}_containsMountPt(t){const r=this.mountList,n=r.length;for(let s=0;s<n;s++){const n=r[s];if(n.length>=t.length&&n.slice(0,t.length)===t)return!0}return!1}}function d(t,r,n){return r?function(...r){const n=r[0],s=this._getFs(n);r[0]=s.path;try{return s.fs[t].apply(s.fs,r)}catch(t){throw this.standardizeError(t,s.path,n),t}}:function(...r){const n=r[0],s=this._getFs(n);if(r[0]=s.path,"function"==typeof r[r.length-1]){const t=r[r.length-1];r[r.length-1]=((...r)=>{r.length>0&&r[0]instanceof h&&this.standardizeError(r[0],s.path,n),t.apply(null,r)})}return s.fs[t].apply(s.fs,r)}}l.Name="MountableFileSystem",l.Options={};const p=[["exists","unlink","readlink"],["stat","mkdir","truncate"],["open","readFile","chmod","utimes"],["chown"],["writeFile","appendFile"]];for(let t=0;t<p.length;t++){const r=p[t];for(const t of r)l.prototype[t]=d(t,!1),l.prototype[t+"Sync"]=d(t+"Sync",!0)}return l});
//# sourceMappingURL=../sourcemaps/backend/MountableFileSystem.js.map
