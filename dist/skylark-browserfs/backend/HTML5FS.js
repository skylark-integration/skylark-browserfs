/**
 * skylark-browserfs - A version of browserfs that ported to running on skylarkjs.
 * @author 
 * @version v0.9.0
 * @link 
 * @license MIT
 */
define(["skylark-langx-async","../generic/preload_file","../core/file_system","../core/api_error","../core/file_flag","../core/node_fs_stats","../libs/path","../core/global","../core/util"],function(e,r,t,i,s,o,n,a,l){"use strict";const{BaseFileSystem:c}=t,{ApiError:u,ErrorCode:E}=i,{ActionType:d}=s,{Stats:f,FileType:h}=o,y=e.each,{buffer2ArrayBuffer:p,arrayBuffer2Buffer:m}=l,{PreloadFile:g}=r;const S=a.webkitRequestFileSystem||a.requestFileSystem||null;function T(e,r,t){switch(e.name){case"PathExistsError":return u.EEXIST(r);case"QuotaExceededError":return u.FileError(E.ENOSPC,r);case"NotFoundError":return u.ENOENT(r);case"SecurityError":return u.FileError(E.EACCES,r);case"InvalidModificationError":return u.FileError(E.EPERM,r);case"TypeMismatchError":return u.FileError(t?E.ENOTDIR:E.EISDIR,r);case"EncodingError":case"InvalidStateError":case"NoModificationAllowedError":default:return u.FileError(E.EINVAL,r)}}class w extends g{constructor(e,r,t,i,s,o){super(e,t,i,s,o),this._entry=r}sync(e){if(!this.isDirty())return e();this._entry.createWriter(r=>{const t=this.getBuffer(),i=new Blob([p(t)]),s=i.size;r.onwriteend=(t=>{r.onwriteend=null,r.onerror=null,r.truncate(s),this.resetDirty(),e()}),r.onerror=(r=>{e(T(r,this.getPath(),!1))}),r.write(i)})}close(e){this.sync(e)}}class v extends c{constructor(e=5,r=a.PERSISTENT){super(),this.size=1048576*e,this.type=r}static Create(e,r){const t=new v(e.size,e.type);t._allocate(e=>e?r(e):r(null,t))}static isAvailable(){return!!S}getName(){return v.Name}isReadOnly(){return!1}supportsSymlinks(){return!1}supportsProps(){return!1}supportsSynch(){return!1}empty(e){this._readdir("/",(r,t)=>{if(r)e(r);else{y(t,(e,r)=>{const t=()=>{r()},i=t=>{r(T(t,e.fullPath,!e.isDirectory))};e.isDirectory?e.removeRecursively(t,i):e.remove(t,i)},t=>{r?e(r):e()})}})}rename(e,r,t){let i=2,s=0;const o=this.fs.root;let a=e;const l=e=>{--i<=0&&t(T(e,a,!1))},c=i=>2==++s?t(new u(E.EINVAL,"Something was identified as both a file and a directory. This should never happen.")):e===r?t():(a=n.dirname(r),void o.getDirectory(a,{},s=>{a=n.basename(r),i.moveTo(s,a,e=>{t()},s=>{i.isDirectory?(a=r,this.unlink(r,i=>{i?l(s):this.rename(e,r,t)})):l(s)})},l));o.getFile(e,{},c,l),o.getDirectory(e,{},c,l)}stat(e,r,t){const i={create:!1},s=e=>{const r=new f(h.DIRECTORY,4096);t(null,r)},o=r=>{t(T(r,e,!1))};this.fs.root.getFile(e,i,e=>{e.file(e=>{const r=new f(h.FILE,e.size);t(null,r)},o)},()=>{this.fs.root.getDirectory(e,i,s,o)})}open(e,r,t,i){const s=t=>{"InvalidModificationError"===t.name&&r.isExclusive()?i(u.EEXIST(e)):i(T(t,e,!1))};this.fs.root.getFile(e,{create:r.pathNotExistsAction()===d.CREATE_FILE,exclusive:r.isExclusive()},t=>{t.file(o=>{const n=new FileReader;n.onloadend=(s=>{const a=this._makeFile(e,t,r,o,n.result);i(null,a)}),n.onerror=(e=>{s(n.error)}),n.readAsArrayBuffer(o)},s)},s)}unlink(e,r){this._remove(e,r,!0)}rmdir(e,r){this.readdir(e,(t,i)=>{t?r(t):i.length>0?r(u.ENOTEMPTY(e)):this._remove(e,r,!1)})}mkdir(e,r,t){this.fs.root.getDirectory(e,{create:!0,exclusive:!0},e=>{t()},r=>{t(T(r,e,!0))})}readdir(e,r){this._readdir(e,(e,t)=>{if(!t)return r(e);{const e=[];for(const r of t)e.push(r.name);r(null,e)}})}_makeFile(e,r,t,i,s=new ArrayBuffer(0)){const o=new f(h.FILE,i.size),n=m(s);return new w(this,r,e,t,o,n)}_readdir(e,r){const t=t=>{r(T(t,e,!0))};var i;this.fs.root.getDirectory(e,{create:!1},e=>{const s=e.createReader();let o=[];const n=()=>{s.readEntries(e=>{e.length?(o=o.concat((i=e,Array.prototype.slice.call(i||[],0))),n()):r(null,o)},t)};n()},t)}_allocate(e){const r=r=>{this.fs=r,e()},t=r=>{e(T(r,"/",!0))};this.type===a.PERSISTENT?function(e,r,t,i){if(void 0!==navigator.webkitPersistentStorage)switch(e){case a.PERSISTENT:navigator.webkitPersistentStorage.requestQuota(r,t,i);break;case a.TEMPORARY:navigator.webkitTemporaryStorage.requestQuota(r,t,i);break;default:i(new TypeError(`Invalid storage type: ${e}`))}else a.webkitStorageInfo.requestQuota(e,r,t,i)}(this.type,this.size,e=>{S(this.type,e,r,t)},t):S(this.type,this.size,r,t)}_remove(e,r,t){const i=i=>{i.remove(()=>{r()},i=>{r(T(i,e,!t))})},s=i=>{r(T(i,e,!t))},o={create:!1};t?this.fs.root.getFile(e,o,i,s):this.fs.root.getDirectory(e,o,i,s)}}return v.Name="HTML5FS",v.Options={size:{type:"number",optional:!0,description:"Storage quota to request, in megabytes. Allocated value may be less. Defaults to 5."},type:{type:"number",optional:!0,description:"window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT."}},v.HTML5FSFile=w,v});
//# sourceMappingURL=../sourcemaps/backend/HTML5FS.js.map
