/**
 * skylark-browserfs - A version of browserfs that ported to running on skylarkjs.
 * @author 
 * @version v0.9.0
 * @link 
 * @license MIT
 */
define(["./api_error","./file_flag","../libs/path","./util"],function(t,n,e,r){"use strict";const{ApiError:i,ErrorCode:c}=t,{FileFlag:s,ActionType:l}=n,{fail:o}=r;class a{supportsLinks(){return!1}diskSpace(t,n){n(0,0)}openFile(t,n,e){throw new i(c.ENOTSUP)}createFile(t,n,e,r){throw new i(c.ENOTSUP)}open(t,n,r,s){this.stat(t,!1,(a,h)=>{if(a)switch(n.pathNotExistsAction()){case l.CREATE_FILE:return this.stat(e.dirname(t),!1,(c,l)=>{c?s(c):l&&!l.isDirectory()?s(i.ENOTDIR(e.dirname(t))):this.createFile(t,n,r,s)});case l.THROW_EXCEPTION:return s(i.ENOENT(t));default:return s(new i(c.EINVAL,"Invalid FileFlag object."))}else{if(h&&h.isDirectory())return s(i.EISDIR(t));switch(n.pathExistsAction()){case l.THROW_EXCEPTION:return s(i.EEXIST(t));case l.TRUNCATE_FILE:return this.openFile(t,n,(t,n)=>{t?s(t):n?n.truncate(0,()=>{n.sync(()=>{s(null,n)})}):o()});case l.NOP:return this.openFile(t,n,s);default:return s(new i(c.EINVAL,"Invalid FileFlag object."))}}})}rename(t,n,e){e(new i(c.ENOTSUP))}renameSync(t,n){throw new i(c.ENOTSUP)}stat(t,n,e){e(new i(c.ENOTSUP))}statSync(t,n){throw new i(c.ENOTSUP)}openFileSync(t,n,e){throw new i(c.ENOTSUP)}createFileSync(t,n,e){throw new i(c.ENOTSUP)}openSync(t,n,r){let s;try{s=this.statSync(t,!1)}catch(s){switch(n.pathNotExistsAction()){case l.CREATE_FILE:if(!this.statSync(e.dirname(t),!1).isDirectory())throw i.ENOTDIR(e.dirname(t));return this.createFileSync(t,n,r);case l.THROW_EXCEPTION:throw i.ENOENT(t);default:throw new i(c.EINVAL,"Invalid FileFlag object.")}}if(s.isDirectory())throw i.EISDIR(t);switch(n.pathExistsAction()){case l.THROW_EXCEPTION:throw i.EEXIST(t);case l.TRUNCATE_FILE:return this.unlinkSync(t),this.createFileSync(t,n,s.mode);case l.NOP:return this.openFileSync(t,n,r);default:throw new i(c.EINVAL,"Invalid FileFlag object.")}}unlink(t,n){n(new i(c.ENOTSUP))}unlinkSync(t){throw new i(c.ENOTSUP)}rmdir(t,n){n(new i(c.ENOTSUP))}rmdirSync(t){throw new i(c.ENOTSUP)}mkdir(t,n,e){e(new i(c.ENOTSUP))}mkdirSync(t,n){throw new i(c.ENOTSUP)}readdir(t,n){n(new i(c.ENOTSUP))}readdirSync(t){throw new i(c.ENOTSUP)}exists(t,n){this.stat(t,null,function(t){n(!t)})}existsSync(t){try{return this.statSync(t,!0),!0}catch(t){return!1}}realpath(t,n,r){if(this.supportsLinks()){const n=t.split(e.sep);for(let t=0;t<n.length;t++){const r=n.slice(0,t+1);n[t]=e.join.apply(null,r)}}else this.exists(t,function(n){n?r(null,t):r(i.ENOENT(t))})}realpathSync(t,n){if(this.supportsLinks()){const n=t.split(e.sep);for(let t=0;t<n.length;t++){const r=n.slice(0,t+1);n[t]=e.join.apply(e,r)}return n.join(e.sep)}if(this.existsSync(t))return t;throw i.ENOENT(t)}truncate(t,n,e){this.open(t,s.getFileFlag("r+"),420,function(t,r){if(t)return e(t);r.truncate(n,function(t){r.close(function(n){e(t||n)})})})}truncateSync(t,n){const e=this.openSync(t,s.getFileFlag("r+"),420);try{e.truncateSync(n)}catch(t){throw t}finally{e.closeSync()}}readFile(t,n,e,r){const i=r;this.open(t,e,420,(t,e)=>{if(t)return r(t);r=function(t,n){e.close(function(e){return t||(t=e),i(t,n)})},e.stat((t,i)=>{if(t)return r(t);const c=Buffer.alloc(i.size);e.read(c,0,i.size,0,t=>{if(t)return r(t);if(null===n)return r(t,c);try{r(null,c.toString(n))}catch(t){r(t)}})})})}readFileSync(t,n,e){const r=this.openSync(t,e,420);try{const t=r.statSync(),e=Buffer.alloc(t.size);return r.readSync(e,0,t.size,0),r.closeSync(),null===n?e:e.toString(n)}finally{r.closeSync()}}writeFile(t,n,e,r,i,c){const s=c;this.open(t,r,420,function(t,r){if(t)return c(t);c=function(t){r.close(function(n){s(t||n)})};try{"string"==typeof n&&(n=Buffer.from(n,e))}catch(t){return c(t)}r.write(n,0,n.length,0,c)})}writeFileSync(t,n,e,r,i){const c=this.openSync(t,r,i);try{"string"==typeof n&&(n=Buffer.from(n,e)),c.writeSync(n,0,n.length,0)}finally{c.closeSync()}}appendFile(t,n,e,r,i,c){const s=c;this.open(t,r,i,function(t,r){if(t)return c(t);c=function(t){r.close(function(n){s(t||n)})},"string"==typeof n&&(n=Buffer.from(n,e)),r.write(n,0,n.length,null,c)})}appendFileSync(t,n,e,r,i){const c=this.openSync(t,r,i);try{"string"==typeof n&&(n=Buffer.from(n,e)),c.writeSync(n,0,n.length,null)}finally{c.closeSync()}}chmod(t,n,e,r){r(new i(c.ENOTSUP))}chmodSync(t,n,e){throw new i(c.ENOTSUP)}chown(t,n,e,r,s){s(new i(c.ENOTSUP))}chownSync(t,n,e,r){throw new i(c.ENOTSUP)}utimes(t,n,e,r){r(new i(c.ENOTSUP))}utimesSync(t,n,e){throw new i(c.ENOTSUP)}link(t,n,e){e(new i(c.ENOTSUP))}linkSync(t,n){throw new i(c.ENOTSUP)}symlink(t,n,e,r){r(new i(c.ENOTSUP))}symlinkSync(t,n,e){throw new i(c.ENOTSUP)}readlink(t,n){n(new i(c.ENOTSUP))}readlinkSync(t){throw new i(c.ENOTSUP)}}return{BaseFileSystem:a,SynchronousFileSystem:class extends a{supportsSynch(){return!0}rename(t,n,e){try{this.renameSync(t,n),e()}catch(t){e(t)}}stat(t,n,e){try{e(null,this.statSync(t,n))}catch(t){e(t)}}open(t,n,e,r){try{r(null,this.openSync(t,n,e))}catch(t){r(t)}}unlink(t,n){try{this.unlinkSync(t),n()}catch(t){n(t)}}rmdir(t,n){try{this.rmdirSync(t),n()}catch(t){n(t)}}mkdir(t,n,e){try{this.mkdirSync(t,n),e()}catch(t){e(t)}}readdir(t,n){try{n(null,this.readdirSync(t))}catch(t){n(t)}}chmod(t,n,e,r){try{this.chmodSync(t,n,e),r()}catch(t){r(t)}}chown(t,n,e,r,i){try{this.chownSync(t,n,e,r),i()}catch(t){i(t)}}utimes(t,n,e,r){try{this.utimesSync(t,n,e),r()}catch(t){r(t)}}link(t,n,e){try{this.linkSync(t,n),e()}catch(t){e(t)}}symlink(t,n,e,r){try{this.symlinkSync(t,n,e),r()}catch(t){r(t)}}readlink(t,n){try{n(null,this.readlinkSync(t))}catch(t){n(t)}}}}});
//# sourceMappingURL=../sourcemaps/core/file_system.js.map
