/**
 * skylark-browserfs - A version of browserfs that ported to running on skylarkjs.
 * @author 
 * @version v0.9.0
 * @link 
 * @license MIT
 */
define(["../libs/buffers"],function(r){const{Buffer:t}=r;var e;!function(r){r[r.EPERM=1]="EPERM",r[r.ENOENT=2]="ENOENT",r[r.EIO=5]="EIO",r[r.EBADF=9]="EBADF",r[r.EACCES=13]="EACCES",r[r.EBUSY=16]="EBUSY",r[r.EEXIST=17]="EEXIST",r[r.ENOTDIR=20]="ENOTDIR",r[r.EISDIR=21]="EISDIR",r[r.EINVAL=22]="EINVAL",r[r.EFBIG=27]="EFBIG",r[r.ENOSPC=28]="ENOSPC",r[r.EROFS=30]="EROFS",r[r.ENOTEMPTY=39]="ENOTEMPTY",r[r.ENOTSUP=95]="ENOTSUP"}(e||(e={}));const E={};E[e.EPERM]="Operation not permitted.",E[e.ENOENT]="No such file or directory.",E[e.EIO]="Input/output error.",E[e.EBADF]="Bad file descriptor.",E[e.EACCES]="Permission denied.",E[e.EBUSY]="Resource busy or locked.",E[e.EEXIST]="File exists.",E[e.ENOTDIR]="File is not a directory.",E[e.EISDIR]="File is a directory.",E[e.EINVAL]="Invalid argument.",E[e.EFBIG]="File is too big.",E[e.ENOSPC]="No space left on disk.",E[e.EROFS]="Cannot modify a read-only file system.",E[e.ENOTEMPTY]="Directory is not empty.",E[e.ENOTSUP]="Operation is not supported.";class s extends Error{constructor(r,t=E[r],s){super(t),this.syscall="",this.errno=r,this.code=e[r],this.path=s,this.stack=(new Error).stack,this.message=`Error: ${this.code}: ${t}${this.path?`, '${this.path}'`:""}`}static fromJSON(r){const t=new s(0);return t.errno=r.errno,t.code=r.code,t.path=r.path,t.stack=r.stack,t.message=r.message,t}static fromBuffer(r,t=0){return s.fromJSON(JSON.parse(r.toString("utf8",t+4,t+4+r.readUInt32LE(t))))}static FileError(r,t){return new s(r,E[r],t)}static ENOENT(r){return this.FileError(e.ENOENT,r)}static EEXIST(r){return this.FileError(e.EEXIST,r)}static EISDIR(r){return this.FileError(e.EISDIR,r)}static ENOTDIR(r){return this.FileError(e.ENOTDIR,r)}static EPERM(r){return this.FileError(e.EPERM,r)}static ENOTEMPTY(r){return this.FileError(e.ENOTEMPTY,r)}toString(){return this.message}toJSON(){return{errno:this.errno,code:this.code,path:this.path,stack:this.stack,message:this.message}}writeToBuffer(r=t.alloc(this.bufferSize()),e=0){const E=r.write(JSON.stringify(this.toJSON()),e+4);return r.writeUInt32LE(E,e),r}bufferSize(){return 4+t.byteLength(JSON.stringify(this.toJSON()))}}return{ApiError:s,ErrorCode:e,ErrorStrings:E}});
//# sourceMappingURL=../sourcemaps/core/api_error.js.map
