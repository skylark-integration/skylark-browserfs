/**
 * skylark-browserfs - A version of browserfs that ported to running on skylarkjs.
 * @author 
 * @version v0.9.0
 * @link 
 * @license MIT
 */
define(function(){var r;!function(r){r[r.EPERM=1]="EPERM",r[r.ENOENT=2]="ENOENT",r[r.EIO=5]="EIO",r[r.EBADF=9]="EBADF",r[r.EACCES=13]="EACCES",r[r.EBUSY=16]="EBUSY",r[r.EEXIST=17]="EEXIST",r[r.ENOTDIR=20]="ENOTDIR",r[r.EISDIR=21]="EISDIR",r[r.EINVAL=22]="EINVAL",r[r.EFBIG=27]="EFBIG",r[r.ENOSPC=28]="ENOSPC",r[r.EROFS=30]="EROFS",r[r.ENOTEMPTY=39]="ENOTEMPTY",r[r.ENOTSUP=95]="ENOTSUP"}(r||(r={}));const t={};t[r.EPERM]="Operation not permitted.",t[r.ENOENT]="No such file or directory.",t[r.EIO]="Input/output error.",t[r.EBADF]="Bad file descriptor.",t[r.EACCES]="Permission denied.",t[r.EBUSY]="Resource busy or locked.",t[r.EEXIST]="File exists.",t[r.ENOTDIR]="File is not a directory.",t[r.EISDIR]="File is a directory.",t[r.EINVAL]="Invalid argument.",t[r.EFBIG]="File is too big.",t[r.ENOSPC]="No space left on disk.",t[r.EROFS]="Cannot modify a read-only file system.",t[r.ENOTEMPTY]="Directory is not empty.",t[r.ENOTSUP]="Operation is not supported.";class e extends Error{constructor(e,E=t[e],i){super(E),this.syscall="",this.errno=e,this.code=r[e],this.path=i,this.stack=(new Error).stack,this.message=`Error: ${this.code}: ${E}${this.path?`, '${this.path}'`:""}`}static fromJSON(r){const t=new e(0);return t.errno=r.errno,t.code=r.code,t.path=r.path,t.stack=r.stack,t.message=r.message,t}static fromBuffer(r,t=0){return e.fromJSON(JSON.parse(r.toString("utf8",t+4,t+4+r.readUInt32LE(t))))}static FileError(r,E){return new e(r,t[r],E)}static ENOENT(t){return this.FileError(r.ENOENT,t)}static EEXIST(t){return this.FileError(r.EEXIST,t)}static EISDIR(t){return this.FileError(r.EISDIR,t)}static ENOTDIR(t){return this.FileError(r.ENOTDIR,t)}static EPERM(t){return this.FileError(r.EPERM,t)}static ENOTEMPTY(t){return this.FileError(r.ENOTEMPTY,t)}toString(){return this.message}toJSON(){return{errno:this.errno,code:this.code,path:this.path,stack:this.stack,message:this.message}}writeToBuffer(r=Buffer.alloc(this.bufferSize()),t=0){const e=r.write(JSON.stringify(this.toJSON()),t+4);return r.writeUInt32LE(e,t),r}bufferSize(){return 4+Buffer.byteLength(JSON.stringify(this.toJSON()))}}return{ApiError:e,ErrorCode:r,ErrorStrings:t}});
//# sourceMappingURL=../sourcemaps/core/api_error.js.map
