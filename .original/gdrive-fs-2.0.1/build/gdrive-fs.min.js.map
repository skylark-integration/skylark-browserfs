{"version":3,"sources":["node_modules/debug/node_modules/ms/index.js","node_modules/debug/src/common.js","node_modules/process/browser.js","node_modules/debug/src/browser.js","lib/gdfs-event.js","lib/gdfs-path.js","lib/gdfs.js","lib/gdfs-ui.js","index.js"],"names":["cachedSetTimeout","cachedClearTimeout","process","module","exports","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","call","runClearTimeout","marker","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","Item","array","noop","nextTick","args","Array","arguments","i","push","prototype","apply","title","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","useColors","window","type","__nwjs","navigator","userAgent","toLowerCase","match","document","documentElement","style","WebkitAppearance","console","firebug","exception","table","parseInt","RegExp","$1","formatArgs","namespace","humanize","diff","c","color","splice","index","lastC","replace","log","save","namespaces","storage","setItem","removeItem","error","load","r","getItem","localstorage","localStorage","colors","require","formatters","j","v","JSON","stringify","message","debug","GdfsEvent","target","eventName","_target","_eventName","listen","handler","constructor","addEventListener","event","fire","extraData","Event","key","Object","keys","dispatchEvent","GdfsPath","pathname","_lastSlash","_absolute","_paths","undefined","parse","getPathPart","toString","paths","elements","join","getFilename","pop","map","item","unshift","merge","p","reduce","pathA","pathB","a","b","isAbsolute","joined","split_path","escaped","element","chars","split","lastSlash","absolute","shift","replacement","acc","next","isArray","last","isDirSpec","rootSpec","dirSpec","Gdfs","_oncwdupdate","_currentPath","id","createClient","signInStatusChangeEvent","loadApi","clientId","clientSecret","script","createElement","setAttribute","Promise","resolve","reject","onload","gapi","client","init","discoveryDocs","scope","auth2","getAuthInstance","isSignedIn","readyState","onerror","URIError","src","body","appendChild","mimeTypeFolder","get","signIn","signOut","getFileList","response","drive","files","list","queryParameters","result","findFolderByName","parentFolderId","folderName","folders","params","q","file","pageToken","nextPageToken","err","stack","findFileByName","fileName","getFileResource","parameters","isFolder","mimeType","downloadFile","fileId","acknowledgeAbuse","requestWithAuth","alt","createFile","folderId","filename","parents","updateFile","data","uploadType","method","endpoint","queryParams","headers","xhr","XMLHttpRequest","open","createUrl","forEach","setRequestHeader","getAccessToken","responseText","statusText","ontimeout","send","accessToken","currentUser","getAuthResponse","access_token","filter","value","encodeURI","getActualRootFolderId","res","fields","onCwdUpdate","prev","fireCwdUpdate","getCurrentFolderId","slice","getCurrentPath","path","setCurrentPath","isDirectory","getPaths","parent","children","child","getFileOfPath","directory","next_cwd","chdirById","currentFolderId","root","searchId","toAbsolutePath","readdir","options","absPath","parentFolder","readAll","pageSize","readFiles","stat","readFile","webContentLink","mkdir","rmdir","dires","delete","unlink","writeFile","GdfsUi","opt","_element","_gdfs","_pageSize","_trashed","_pageToken","_files","_opt","onFileListChange","onCurrentDirChange","_fileListChangeEvent","_currentDirChangeEvent","reload","onSignedInStatusChange","status","isPageCompleted","getFiles","begin","end","readDir","andConditionsOfQuerySearchClauses","uploadFile","reader","FileReader","readAsArrayBuffer","fileIds","Ui","Path","Function"],"mappings":"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","file":"gdrive-fs.min.js","sourceRoot":"..","sourcesContent":["/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* Active `debug` instances.\n\t*/\n\tcreateDebug.instances = [];\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn match;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.enabled = createDebug.enabled(namespace);\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = selectColor(namespace);\n\t\tdebug.destroy = destroy;\n\t\tdebug.extend = extend;\n\t\t// Debug.formatArgs = formatArgs;\n\t\t// debug.rawLog = rawLog;\n\n\t\t// env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\tcreateDebug.instances.push(debug);\n\n\t\treturn debug;\n\t}\n\n\tfunction destroy() {\n\t\tconst index = createDebug.instances.indexOf(this);\n\t\tif (index !== -1) {\n\t\t\tcreateDebug.instances.splice(index, 1);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0; i < createDebug.instances.length; i++) {\n\t\t\tconst instance = createDebug.instances[i];\n\t\t\tinstance.enabled = createDebug.enabled(instance.namespace);\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\nfunction log(...args) {\n\t// This hackery is required for IE8/9, where\n\t// the `console.log` function doesn't have 'apply'\n\treturn typeof console === 'object' &&\n\t\tconsole.log &&\n\t\tconsole.log(...args);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","\"use strict\";\nconst debug = require(\"debug\")(\"GdfsEvent\");\n/**\n * Event class\n * @constructor\n * @param {HTMLElement} target An element that dispatch\n * @param {string} eventName An event name\n */\nfunction GdfsEvent(target, eventName) {\n    this._target = target;\n    this._eventName = eventName;\n}\n\n/**\n * Listen this event.\n * @param {Function} handler An event handler\n * @returns {undefined}\n */\nGdfsEvent.prototype.listen = function(handler) {\n    debug(`GdfsEvent.listen: ${this._eventName}=>${handler.constructor.name}`);\n    if(handler.constructor.name === \"AsyncFunction\") {\n        this._target.addEventListener(\n            this._eventName, async event => await handler(event));\n    } else {\n        this._target.addEventListener(\n            this._eventName, handler);\n    }\n};\n\n/**\n * Fire this event.\n * @param {Function} handler An event handler\n * @returns {undefined}\n */\nGdfsEvent.prototype.fire = function(extraData = {}) {\n    const event = new Event(this._eventName);\n    for(const key of Object.keys(extraData)) {\n        event[key] = extraData[key];\n    }\n    debug(\n        `GdfsEvent.fire: ${this._eventName}`,\n        `extraData: ${JSON.stringify(extraData)}`);\n    this._target.dispatchEvent(event);\n};\n\nmodule.exports = GdfsEvent;\n","\"use strict\";\nconst debug = require(\"debug\")(\"GdfsPath\");\ndebug(\"loading\");\n\n/**\n * Gdfs Path class.\n * @constructor\n * @param {string|undefined} pathname initial path.\n */\nfunction GdfsPath(pathname) {\n    this._lastSlash = true;\n    this._absolute = true;\n    this._paths = [];\n    if(pathname != undefined) {\n        this.parse(pathname);\n    }\n}\n\n\n/**\n * Get a part of path.\n * @returns {GdfsPath} A path object including only path.\n */\nGdfsPath.prototype.getPathPart = function() {\n    if(this._lastSlash) {\n        return new GdfsPath(this.toString());\n    }\n    const paths = this.elements();\n    paths.splice(-1, 1, \"\");\n    debug(`getPathPart: paths: ${JSON.stringify(paths)}`);\n    return new GdfsPath(paths.join(\"/\"));\n};\n\n/**\n * Get filename part of path.\n * @returns {string} A filename.\n */\nGdfsPath.prototype.getFilename = function() {\n    return this.elements().pop();\n};\n\n/**\n * Get paths elements.\n * @returns {Array<string>} the elements.\n */\nGdfsPath.prototype.elements = function() {\n    const elements = this._paths.map(item => item);\n    if(this._absolute) {\n        elements.unshift(\"\");\n    }\n    if(this._lastSlash) {\n        elements.push(\"\");\n    }\n    return elements;\n};\n\n/**\n * Create a new path object with joining the two paths.\n * \n * @param {Array<GdfsPath>} paths The paths to join.\n * @returns {GdfsPath} The path that was joined.\n */\nGdfsPath.merge = (...paths) => {\n    debug(`Gdfs.merge: ${paths.map(p=>p.toString()).join(\" | \")}`);\n    return paths.reduce( (pathA, pathB, index) => {\n        debug(`Gdfs.merge: Reducing #${index}`);\n        debug(`Gdfs.merge: pathA: ${pathA.toString()}`);\n        debug(`Gdfs.merge: pathB: ${pathB.toString()}`);\n        if(typeof(pathA) === \"string\") {\n            pathA = new GdfsPath(pathA);\n        }\n        if(typeof(pathB) === \"string\") {\n            pathB = new GdfsPath(pathB);\n        }\n        const a = pathA.toString();\n        const b = pathB.toString();\n        if(pathB.isAbsolute()) {\n            debug(`returns ${b}`);\n            return new GdfsPath(b);\n        }\n        const joined = new GdfsPath([a, b].join(\"/\"));\n        debug(`Gdfs.merge: returns ${joined.toString()}`);\n        return joined;\n    });\n};\n\nconst split_path = pathname => {\n    const paths = [];\n    let escaped = false;\n    let i = 0;\n    let element = \"\";\n    let chars = pathname.split(\"\");\n    while(i < chars.length) {\n        const c = chars[i];\n        if(escaped) {\n            element += c;\n            escaped = false;\n        } else if(c === \"\\\\\"){\n            escaped = true;\n        } else if(c === \"/\") {\n            paths.push(element);\n            element = \"\";\n        } else {\n            element += c;\n        }\n        i++;\n    }\n    paths.push(element);\n    if(escaped) {\n        throw new Error(`Invalid pathname ${pathname}`);\n    }\n    if(paths.length == 0) {\n        throw new Error(\"Invalid pathname. It should not be empty.\");\n    }\n    return paths;\n};\n\n/**\n * Set a path repersented by a string.\n * @param {string} pathname A path name to parse\n * @return {undefined}\n */\nGdfsPath.prototype.parse = function(pathname) {\n    let paths = split_path(pathname.replace(/\\/+/g, \"/\"));\n    debug(`parse ${JSON.stringify(pathname)} => ${JSON.stringify(paths)}`);\n    const lastSlash = (paths[paths.length - 1] === \"\");\n    const absolute = (paths[0] === \"\");\n    if(lastSlash) {\n        paths.pop();\n    }\n    if(absolute) {\n        paths.shift();\n    }\n    this._lastSlash = !!lastSlash;\n    this._absolute = !!absolute;\n    for(;;) {\n        let replacement = false;\n        if(paths.length >= 2) {\n            paths = paths.reduce( (acc, next) => {\n                if(!Array.isArray(acc)) {\n                    acc = [acc];\n                }\n                const last = acc[acc.length - 1];\n                if(last !== \"..\" && next === \"..\") {\n                    acc.pop();\n                    replacement = true;\n                } else if(last !== \".\" && next === \".\") {\n                    replacement = true;\n                } else {\n                    acc.push(next);\n                }\n                return acc;\n            });\n        }\n        if(!replacement) {\n            this._paths = paths;\n            debug(`this._paths:${JSON.stringify(this._paths)}`);\n            break;\n        }\n    }\n};\n\n/**\n * Returns if this represents an absolute path.\n * @returns {Boolean} True if this represents an absolute path, otherwise false.\n */\nGdfsPath.prototype.isAbsolute = function() {\n    return this._absolute;\n};\n\n/**\n * Returns if this represents a directory.\n * @returns {Boolean} True if this represents a directory, otherwise false.\n */\nGdfsPath.prototype.isDirSpec = function() {\n    return this._lastSlash;\n};\n\n/**\n * Returns a path represented by string.\n * @returns {string} The path that this is representing.\n */\nGdfsPath.prototype.toString = function() {\n    if(this._paths.length === 0) {\n        return \"/\";\n    }\n    const rootSpec = this._absolute ? \"/\" : \"\";\n    const dirSpec = this._lastSlash ? \"/\" : \"\";\n    const pathname = `${rootSpec}${this._paths.join(\"/\")}${dirSpec}`;\n    return pathname;\n};\n\nmodule.exports = GdfsPath;\n","/*global gapi:false*/\n\"use strict\";\nconst debug = require(\"debug\")(\"gdfs\");\ndebug(\"loading\");\nconst GdfsEvent = require(\"./gdfs-event.js\");\nconst GdfsPath = require(\"./gdfs-path.js\");\n\n/**\n * Gdfs class is an interface for the Google Drive API v3.\n *\n * The instance manages a current working directory(CWD) and offers methods\n * to operate files and folders on the Google Drive by its pathname.\n *\n * Before creating an instance, the APIs must be loaded by the class method\n * [`loadApi`](#.loadApi) with a ClientId and ApiKey.\n * These had to be created in a project of Google devloper Console.\n *\n * And to operates files, user must sign-in with the Google account.\n * See [signIn](#.signIn) and [signOut](#.signOut).\n *\n * Instance's CWD is initialized to the root on constructor. It can be changed\n * by [chdir](#chdir) method. When it is changed, the 'oncwdupdate' callback\n * is fired. To know where the CWD is, The [cwd](#cwd) method is available.\n *\n * @constructor\n */\nfunction Gdfs() {\n    this._oncwdupdate = null;\n    this._currentPath = [{ id: \"root\", name: \"\", }];\n}\n\n/**\n * Create Gdfs client.\n * @returns {Gdfs} The google drive interface that has a current directory.\n */\nGdfs.createClient = () => {\n    return new Gdfs();\n};\n\n/**\n * signInStatusChangeEvent\n * @type {GdfsEvent}\n */\nGdfs.signInStatusChangeEvent = new GdfsEvent(\n    window, \"gdfs-signin-status-change\");\n\n/**\n * Load Google Drive APIs and initialize its client object.\n *\n * The loaded all APIs are accessible with a global `gapi` object.\n * But it is wrapped by this class so the users should not use it directly.\n *\n * @param {string} clientId A clientId from the Developer console.\n * @param {string} clientSecret An clientSecret from the Developer console.\n * @returns {Promise} A promise that will be resolved when the loading completed.\n */\nGdfs.loadApi = (clientId, clientSecret) => {\n    debug(\"Start of Gdfs.loadApi\");\n    const script = document.createElement(\"SCRIPT\");\n    script.setAttribute(\"async\", \"async\");\n    script.setAttribute(\"src\", \"https://apis.google.com/js/api.js\");\n    const p = new Promise( (resolve, reject) => {\n        script.addEventListener(\"load\", () => {\n            script.onload = () => {};\n            gapi.load(\"client:auth2\", async () => {\n                debug(\"initialize gapi.client\");\n\n                if(typeof(clientId) === \"object\" && clientSecret == null &&\n                    \"clientId\" in clientId && \"clientSecret\" in clientId &&\n                    \"discoveryDocs\" in clientId && \"scope\" in clientId)\n                {\n                    await gapi.client.init(clientId);\n                } else {\n                    await gapi.client.init({\n                        clientId, clientSecret,\n                        discoveryDocs: [\n                            \"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"\n                        ],\n                        scope: [\n                            \"https://www.googleapis.com/auth/drive\",\n                            \"https://www.googleapis.com/auth/drive.appdata\",\n                            \"https://www.googleapis.com/auth/drive.file\",\n                            \"https://www.googleapis.com/auth/drive.metadata\",\n                            \"https://www.googleapis.com/auth/drive.metadata.readonly\",\n                            \"https://www.googleapis.com/auth/drive.photos.readonly\",\n                            \"https://www.googleapis.com/auth/drive.readonly\",\n                        ].join(\" \"),\n                    });\n                }\n                gapi.auth2.getAuthInstance().isSignedIn.listen( () => {\n                    debug(\"the signed-in-status changed\");\n                    Gdfs.signInStatusChangeEvent.fire();\n                });\n                Gdfs.signInStatusChangeEvent.fire();\n                debug(`Gdfs.loadApi SignedIn: ${Gdfs.isSignedIn()}`);\n                debug(\"Gdfs.loadApi is resolved\");\n                resolve();\n            });\n        });\n        script.addEventListener(\"readystatechange\", () => {\n            debug(`readystatechange ${script.readyState}`);\n            if(script.readyState === \"complete\") {\n                script.onload();\n            }\n        });\n        script.onerror = event => {\n            debug(\"Gdfs.loadApi is rejected\");\n            reject(new URIError(\n                `The script ${event.target.src} is not accessible.`));\n        };\n        document.body.appendChild(script);\n    });\n    debug(\"End of Gdfs.loadApi\");\n    return p;\n};\n\n/**\n * A mime type of the Google Drive's folder.\n * @type {string}\n */\nGdfs.mimeTypeFolder = \"application/vnd.google-apps.folder\";\n\n/**\n * Check if gapi was signed in.\n * @returns {boolean} true if gapi is signed in, otherwise false.\n */\nGdfs.isSignedIn = () => {\n    return gapi.auth2.getAuthInstance().isSignedIn.get();\n};\n\n/**\n * Sign in to Google Drive.\n * @async\n * @returns {undefined}\n */\nGdfs.signIn = async () => {\n    return await gapi.auth2.getAuthInstance().signIn();\n};\n\n/**\n * Sign out from the Google Drive.\n * @async\n * @returns {undefined}\n */\nGdfs.signOut = async () => {\n    return await gapi.auth2.getAuthInstance().signOut();\n};\n\n/**\n * Get file list.\n * @async\n * @param {object} queryParameters The parameters for the API.\n * @returns {Promise<object>} The result of the API.\n */\nGdfs.getFileList = async (queryParameters) => {\n    const response = await gapi.client.drive.files.list(queryParameters);\n    return response.result;\n};\n\n/**\n * Find a folder by name from a folder.\n * @async\n * @param {string} parentFolderId A parent folder id.\n * @param {string} folderName A folder name to find\n * @returns {Array<object>} A folder list that found.\n */\nGdfs.findFolderByName = async (parentFolderId, folderName) => {\n    debug(\"No tests pass: Gdfs.findFolderByName\");\n\n    const folders = [];\n    const q = [\n        `parents in '${parentFolderId}'`,\n        `name = '${folderName}'`,\n        `mimeType = '${Gdfs.mimeTypeFolder}'`,\n        \"trashed = false\",\n    ].join(\" and \");\n\n    const params = {\n        \"pageSize\": 10,\n        \"pageToken\": null,\n        \"q\": q,\n        \"fields\": \"nextPageToken, \" +\n                  \"files(id, name, mimeType, webContentLink, webViewLink)\",\n    };\n\n    debug(`${JSON.stringify(params)}`);\n    try {\n        do {\n            const result = await Gdfs.getFileList(params);\n            debug(`${JSON.stringify(result)}`);\n            for(const file of result.files) {\n                folders.push(file);\n            }\n            params.pageToken = result.nextPageToken;\n        } while(params.pageToken != null);\n    } catch(err) {\n        debug(err.stack);\n    }\n\n    return folders;\n};\n\n/**\n * Find a file by name from a folder.\n * @async\n * @param {string} parentFolderId A parent folder id.\n * @param {string} fileName A file name to find\n * @returns {Promise<Array<object> >} A folder list that found.\n */\nGdfs.findFileByName = async (parentFolderId, fileName) => {\n    debug(\"No tests pass: Gdfs.findFileByName\");\n\n    const files = [];\n    const q = [\n        `parents in '${parentFolderId}'`,\n        `name = '${fileName}'`,\n        \"trashed = false\",\n    ].join(\" and \");\n\n    const params = {\n        \"pageSize\": 10,\n        \"pageToken\": null,\n        \"q\": q,\n        \"fields\": \"nextPageToken, \" +\n                  \"files(id, name, mimeType, webContentLink, webViewLink)\",\n    };\n\n    debug(`findFileByName: params: ${JSON.stringify(params, null, \"  \")}`);\n    do {\n        const result = await Gdfs.getFileList(params);\n        for(const file of result.files) {\n            debug(`findFileByName: found file: ${JSON.stringify(file)}`);\n            files.push(file);\n        }\n        debug(`findFileByName: result.nextPageToken: ${result.nextPageToken}`);\n        params.pageToken = result.nextPageToken;\n    } while(params.pageToken != null);\n\n    return files;\n};\n\n/**\n * Get file resource.\n * @async\n * @param {object} queryParameters The parameters for the API.\n * @returns {Promise<object>} The result of the API.\n */\nGdfs.getFileResource = async (parameters) => {\n    const response = await gapi.client.drive.files.get(parameters);\n    return response.result;\n};\n\n/**\n * Check if the file is a folder.\n * @param {object} file The file object provided from the result\n * of `getFileList` method.\n * @returns {boolean} The file is a folder or not.\n */\nGdfs.isFolder = (file) => {\n    return file.mimeType === Gdfs.mimeTypeFolder;\n};\n\n/**\n * Get a file content as text from Google Drive.\n * Even if the file is not a text actually, it could be converted\n * to ArrayBuffer, Blob or JSON to use by Web App.\n * @param {string} fileId The file id to download.\n * @param {boolean|null} acknowledgeAbuse A user acknowledgment\n * status for the potential to abuse. This parameter is optional.\n * default value is false.\n * @returns {Promise<string>} A downloaded content as text.\n */\nGdfs.downloadFile = (fileId, acknowledgeAbuse) => {\n    return requestWithAuth(\"GET\",\n        \"https://www.googleapis.com/drive/v3/files/\"+fileId,\n        { alt: \"media\", acknowledgeAbuse : acknowledgeAbuse });\n};\n\n/**\n * Create a new file's resource.\n * @param {string} folderId The folder id where the file is created.\n * @param {string} filename The file name.\n * @param {string} mimeType The mime type for the new file.\n * @returns {Promise<object>} The response of the API.\n */\nGdfs.createFile = async (folderId, filename, mimeType) => {\n    const response = await requestWithAuth(\"POST\",\n        \"https://www.googleapis.com/drive/v3/files\", {},\n        { \"Content-Type\": \"application/json\", },\n        JSON.stringify({\n            name: filename,\n            mimeType: mimeType,\n            parents: [folderId],\n        }));\n    return JSON.parse(response);\n};\n\n/**\n * Upload a file content to update a existing file.\n * @param {string} fileId The file id to update.\n * @param {string} mimeType The content type of the file.\n * @param {any} data The file content.\n * @returns {Promise<object>} The response of the API.\n */\nGdfs.updateFile = async (fileId, mimeType, data) => {\n    const response = await requestWithAuth(\"PATCH\",\n        \"https://www.googleapis.com/upload/drive/v3/files/\"+fileId,\n        { uploadType: \"media\" },\n        { \"Content-Type\": mimeType },\n        data);\n    return JSON.parse(response);\n};\n\n/**\n * @param {string} method The request method.\n * @param {string} endpoint The endpoint of API.\n * @param {object} queryParams The query parameters.\n * @param {object} headers The request headers.\n * @param {any} body The request body.\n * @returns {Promise<object>} The response of the request.\n */\nconst requestWithAuth = (method, endpoint, queryParams, headers, body) => {\n    let xhr = new XMLHttpRequest();\n    xhr.open(method, createUrl(endpoint, queryParams), true);\n    headers = headers || {};\n    Object.keys(headers).forEach( name => {\n        xhr.setRequestHeader(name, headers[name]);\n    });\n    xhr.setRequestHeader(\"Authorization\",\n        \"Bearer \" + getAccessToken());\n    xhr.timeout = 30000;\n    return new Promise( (resolve, reject) => {\n        xhr.onload = () => { resolve(xhr.responseText); };\n        xhr.onerror = () => { reject(new Error(xhr.statusText)); };\n        xhr.ontimeout = () => { reject(new Error(\"request timeout\")); };\n        xhr.send(body);\n    });\n};\n\n/**\n * Get access-token on current session.\n * @returns {string} The access token.\n */\nconst getAccessToken = () => {\n    const googleUser = gapi.auth2.getAuthInstance().currentUser.get();\n    const authResponse = googleUser.getAuthResponse(true);\n    const accessToken = authResponse.access_token;\n    return accessToken;\n};\n\n/**\n * Create URI including query parameters.\n * @param {string} endpoint The endpoint of API.\n * @param {object|null} params The query parameters.\n * @returns {string} The URI.\n */\nconst createUrl = (endpoint, params) => {\n    if(params == null) {\n        return endpoint;\n    }\n    let keys = Object.keys(params).filter(\n        key => (key !== \"\"));\n    if(keys.length == 0) {\n        return endpoint;\n    }\n    let queryString = keys.map( key => {\n        let value = params[key];\n        return (value == null ? null : `${key}=${encodeURI(value)}`);\n    }).join(\"&\");\n    return `${endpoint}?${queryString}`;\n};\n\n/**\n * Get actual root folder id.\n * @async\n * @return {Promise<string>} The root folder's id\n */\nGdfs.getActualRootFolderId = async () => {\n    const res = await Gdfs.getFileResource({ fileId: \"root\", fields: \"id\" });\n    debug(`getActualRootFolderId: res ${JSON.stringify(res, null, \"  \")}`);\n    return res.id;\n};\n\n/**\n * Set oncwdchage callback hander.\n * @param {FUnction|AsyncFunction} handler a function to be invoked when\n *      the current directory is changed.\n * @returns {undefined|Function} the previous handler will be returned.\n */\nGdfs.prototype.onCwdUpdate = function(handler) {\n    const prev = this._oncwdupdate;\n    if(handler != null) {\n        this._oncwdupdate = handler;\n    }\n    return prev;\n};\n\n/**\n * Fire cwdUpdate.\n * @returns {Promise} what the handler returns.\n */\nGdfs.prototype.fireCwdUpdate = async function() {\n    if(this._oncwdupdate) {\n        try {\n            const result = this._oncwdupdate();\n            if(result != null) {\n                if(result.constructor === Promise) {\n                    return await result;\n                }\n                return result;\n            }\n        } catch (err) {\n            debug(err.stack);\n        }\n    }\n};\n\n/**\n * Get current folder id.\n * @returns {string} The folder id that the instance is.\n */\nGdfs.prototype.getCurrentFolderId = function() {\n    return this._currentPath.slice(-1)[0].id;\n};\n\n/**\n * Get current working directory as path object.\n * @returns {GdfsPath} the current working directory.\n */\nGdfs.prototype.getCurrentPath = function() {\n    const path = this._currentPath.map( path => `${path.name}/`).join(\"\");\n    const cwd = new GdfsPath(path);\n    debug(`getCurrentPath: ${cwd.toString()}`);\n    return cwd;\n};\n\n/**\n * Set current working directory with path object.\n * @async\n * @param {GdfsPath} path the new current working directory.\n * @returns {Promise<boolean>} the status of the operation.\n */\nGdfs.prototype.setCurrentPath = async function(path) {\n    debug(\"No tests pass: Gdfs#setCurrentPath\");\n    debug(`setCurrentPath(${path})`);\n    if(!path.isAbsolute()) {\n        debug(`The path must be absolute. ${path}`);\n        return false;\n    }\n    if(!(await this.isDirectory(path))) {\n        debug(`${path} is not a directory`);\n        return false;\n    }\n    this._currentPath = await this.getPaths(path);\n    await this.fireCwdUpdate();\n    return true;\n};\n\n/**\n * Get an array of path element from root directory.\n * @async\n * @param {GdfsPath} path path object.\n * @returns {Promise<Array<object> >} the array of the object having an id and\n *      the name.\n */\nGdfs.prototype.getPaths = async function(path) {\n    debug(\"No tests pass: Gdfs#getPaths\");\n    debug(`getPaths(${path})`);\n    if(!path.isAbsolute()) {\n        debug(\"getPaths: Error: the path must be absolute\");\n        return null;\n    }\n    const paths = [ { id:\"root\", name:\"\", mimeType: Gdfs.mimeTypeFolder } ];\n    for(const name of path.elements().slice(1)) {\n        if(name === \"\") {\n            break;\n        }\n        const parent = paths.slice(-1)[0];\n        debug(`name: ${name}, parent: ${JSON.stringify(parent)}`);\n        const path = { id: null, name: null, mimeType: null };\n        if(parent.id != null) {\n            const children = await Gdfs.findFileByName(parent.id, name);\n            if(children.length > 0) {\n                const child = children.shift();\n                path.id = child.id;\n                path.name = child.name;\n                path.mimeType = child.mimeType;\n            }\n        }\n        paths.push(path);\n    }\n    debug(`getPaths: ${JSON.stringify(paths, null, \"  \")}`);\n    return paths;\n};\n\n/**\n * Get the file object that the path points to.\n * @param {GdfsPath} path the path.\n * @returns {file} the file object of google drive.\n */\nGdfs.prototype.getFileOfPath = async function(path) {\n    const paths = await this.getPaths(path);\n    if(!paths) {\n        return null;\n    }\n    return paths.slice(-1)[0];\n};\n\n/**\n * Get the current working directory of gdrive-fs.\n * @returns {string} The current working directory.\n */\nGdfs.prototype.cwd = function() {\n    return this.getCurrentPath().toString();\n};\n\n/**\n * Changes the current working directory of this client session.\n * @param {string} directory A pathname to operate.\n * @async\n * @returns {Promise<boolean>} the status of the operation.\n */\nGdfs.prototype.chdir = async function(directory) {\n    debug(\"No tests pass: Gdfs#chdir\");\n    const cwd = this.getCurrentPath();\n    const next_cwd = GdfsPath.merge(cwd, new GdfsPath(directory));\n    return await this.setCurrentPath(next_cwd);\n};\n\n/**\n * Move current directory to root, parent or one of children.\n * @async\n * @param {string} folderId A destination file id to move.\n *      To move to parent, \"..\" is available.\n * @returns {Promise<boolean>} the status of the operation.\n */\nGdfs.prototype.chdirById = async function(folderId) {\n    debug(`Gdfs.chdirById( ${folderId} )`);\n    if(folderId === \".\") {\n        return true;\n    }\n    const currentFolderId = this.getCurrentFolderId();\n    if(folderId === \"/\" || folderId === \"root\" ) {\n        this._currentPath = [ { id:\"root\", name:\"\" } ];\n        await this.fireCwdUpdate();\n    } else if(folderId === \"..\") {\n        if(currentFolderId === \"root\") {\n            debug(\"Could not move to upper folder from root.\");\n            return false;\n        }\n        this._currentPath.pop();\n        await this.fireCwdUpdate();\n    } else if(folderId !== currentFolderId) {\n        const paths = [];\n        const root = await Gdfs.getFileResource({fileId: \"root\", fields: \"id\"});\n        let searchId = folderId;\n        for(;;) {\n            const file = await Gdfs.getFileResource({\n                fileId: searchId,\n                fields: \"id, name, parents, mimeType\",\n            });\n            if(file == null) {\n                debug(`folder ${searchId} is not found.`);\n                return false;\n            }\n            if(file.mimeType !== Gdfs.mimeTypeFolder) {\n                debug(`folder ${searchId} is not folder.`);\n                return false;\n            }\n            debug(JSON.stringify(file, null,  \"  \"));\n            if(file.id == root.id) {\n                paths.unshift({id: \"root\", name: \"\" });\n                break;\n            } else {\n                paths.unshift({id: file.id, name: file.name });\n            }\n            searchId = file.parents.shift();\n        }\n        debug(JSON.stringify(paths, null, \"  \"));\n        this._currentPath = paths;\n        await this.fireCwdUpdate();\n    }\n    return true;\n};\n\n/**\n * Check the path is a directory.\n * @async\n * @param {GdfsPath} path A path to check\n * @returns {Promise<Boolean>} The path is a directory or not.\n */\nGdfs.prototype.isDirectory = async function(path) {\n    debug(\"No tests pass: Gdfs#isDirectory\");\n    const file = await this.getFileOfPath(this.toAbsolutePath(path));\n    if(!file) {\n        return false;\n    }\n    return file.mimeType === Gdfs.mimeTypeFolder;\n};\n\n/**\n * Convert to absolute path.\n * @param {GdfsPath} path path to be converted\n * @returns {GdfsPath} An absolute path\n */\nGdfs.prototype.toAbsolutePath = function(path) {\n    debug(\"No tests pass: Gdfs#toAbsolutePath\");\n    if(path.isAbsolute()) {\n        return path;\n    }\n    const cwd = this.getCurrentPath();\n    return GdfsPath.merge(cwd, path);\n};\n\n/**\n * Read the directory to get a list of filenames.\n *\n * This method may not returns all files in the directory.\n * To know all files were listed, check the `pageToken` field in the parameter\n * `options` after the invocation.\n * If the reading was completed, the field would be set `null`.\n * The rest files unread will be returned at the next invocation with same\n * parameters.\n *\n * ```javascript\n * const readDirAll = async path => {\n *     const opts = { pageSize: 10, pageToken: null };\n *     const files = [];\n *     do {\n *        for(const fn of await files.readdir(path, opts)) {\n *            files.push(fn);\n *        }\n *     } while(opts.pageToken != null);\n * };\n * ```\n *\n * @async\n * @since v1.1.0\n * @param {string} path A path to the directory.\n *\n * @param {object|null} options (Optional) options for this method.\n *\n * Only two fields are available:\n *\n * * \"pageSize\": Set maximum array size that this method returns at one\n * time.  The default value 10 will be used if this is not specified or\n * zero or negative value is specified.\n * * \"pageToken\": Set null to initial invocation to read from first\n * entry. This would be updated other value if the unread files are\n * remained. The value is used for reading next files. User should not\n * set the value except for null.\n *\n * If this parameter is ommited, all files will be read.\n * This is not recomended feature for the directory that has a number of files.\n *\n * @returns {Promise<Array<string> >} returns an array of filenames.\n */\nGdfs.prototype.readdir = async function(path, options) {\n    path += path.match(/\\/$/) ? \"\" : \"/\";\n    const absPath = this.toAbsolutePath(new GdfsPath(path));\n    const parentFolder = await this.getFileOfPath(absPath.getPathPart());\n    debug(`readdir: parentFolder: ${JSON.stringify(parentFolder)}`);\n\n    if(!parentFolder || parentFolder.id == null) {\n        debug(`readdir: The path not exists ${path}`);\n        return null;\n    }\n\n    if(!Gdfs.isFolder(parentFolder)) {\n        debug(`readdir: The path is not a folder ${path}`);\n        return null;\n    }\n\n    const files = [];\n    const readAll = (options == null);\n    options = options || {};\n    const pageSize = options.pageSize || 10;\n    let pageToken = options.pageToken || null;\n\n    const readFiles = async params => {\n        debug(`readdir: params: ${JSON.stringify(params, null, \"  \")}`);\n        const result = await Gdfs.getFileList(params);\n        debug(`readdir: result.nextPageToken: ${result.nextPageToken}`);\n        for(const file of result.files) {\n            files.push(file.name);\n        }\n        return result.nextPageToken;\n    };\n\n    const params = {\n        \"pageSize\": pageSize <= 0 ? 10 : pageSize,\n        \"pageToken\": pageToken,\n        \"q\": `parents in '${parentFolder.id}' and trashed = false`,\n        \"fields\": \"nextPageToken, files(name)\",\n    };\n\n    if(!readAll) {\n        // eslint-disable-next-line require-atomic-updates\n        options.pageToken = await readFiles(params);\n    } else {\n        do {\n            // eslint-disable-next-line require-atomic-updates\n            options.pageToken = await readFiles(params);\n        } while(options.pageToken != null);\n    }\n\n    debug(`readdir: files: ${JSON.stringify(files)}`);\n    return files;\n};\n\n/**\n * Get file's properties.\n * It is a file resource of Google Drive including id, name, mimeType,\n * webContentLink and webViewLink about the file or directory.\n *\n * @async\n * @param {string} path A pathname.\n * @returns {File} The file resource of Google Drive including id, name,\n *      mimeType, webContentLink and webViewLink about the file or directory.\n * @since v1.1.0\n */\nGdfs.prototype.stat = async function(path) {\n    debug(`Gdfs#stat(${path})`);\n    path = path.replace(/\\/+$/, \"\");\n    const absPath = this.toAbsolutePath(new GdfsPath(path));\n    debug(`stat: absPath: ${absPath.toString()}`);\n    path = absPath.toString();\n    if(path === \"/\") {\n        const file = await Gdfs.getFileResource({\n            fileId: \"root\",\n            fields: \"id, name, mimeType, webContentLink, webViewLink\",\n        });\n        debug(`stat: file ${JSON.stringify(file)}`);\n        return file;\n    }\n    const parentFolder = await this.getFileOfPath(absPath.getPathPart());\n    debug(`stat: parentFolder: ${JSON.stringify(parentFolder)}`);\n    if(!parentFolder || parentFolder.id == null) {\n        debug(`stat: The path not exists ${path}`);\n        return null;\n    }\n    const filename = absPath.getFilename();\n    debug(`stat: filename: ${filename}`);\n    const files = await Gdfs.findFileByName(parentFolder.id, filename);\n    if(files.length === 0) {\n        debug(`stat: File not found ${path}`);\n        return null;\n    }\n    const file = files.shift();\n    debug(`stat: file ${JSON.stringify(file)}`);\n    return file;\n};\n\n/**\n * Read a file.\n * The file must have webContentLink in its resource to read the contents,\n * To get the resource, Use [`Gdfs#stat`](#stat).\n *\n * @async\n * @param {string} path A pathname to operate.\n * @returns {Promise<string>} The file content.\n */\nGdfs.prototype.readFile = async function(path) {\n    debug(`Gdfs#readFile(${path})`);\n    const absPath = this.toAbsolutePath(new GdfsPath(path));\n    const parentFolder = await this.getFileOfPath(absPath.getPathPart());\n    debug(`readFile: parentFolder: ${JSON.stringify(parentFolder)}`);\n    if(!parentFolder || parentFolder.id == null) {\n        debug(`readFile: The path not exists ${path}`);\n        return null;\n    }\n    const filename = absPath.getFilename();\n    debug(`readFile: filename: ${filename}`);\n    const files = await Gdfs.findFileByName(parentFolder.id, filename);\n    debug(`readFile: files: ${JSON.stringify(files)}`);\n    if(files.length === 0) {\n        debug(`File not found ${path}`);\n        return null;\n    }\n    const file = files.shift();\n    if(!file.webContentLink) {\n        debug(`File is not downloadable ${path}`);\n        return null;\n    }\n    return await Gdfs.downloadFile(file.id);\n};\n\n/**\n * Make a directory.\n * @async\n * @param {string} path A pathname to operate.\n * @returns {Promise<object>} The API response.\n */\nGdfs.prototype.mkdir = async function(path) {\n    debug(`mkdir(${path})`);\n\n    path = path.replace(/\\/+$/, \"\");\n    const absPath = this.toAbsolutePath(new GdfsPath(path));\n    const parentFolder = await this.getFileOfPath(absPath.getPathPart());\n    debug(`mkdir: parentFolder ${JSON.stringify(parentFolder)}`);\n    if(!parentFolder || parentFolder.id == null) {\n        debug(`mkdir: The path not exists ${path}`);\n        return null;\n    }\n    const pathname = absPath.getFilename();\n    debug(`mkdir: pathname: ${pathname}`);\n    const files = await Gdfs.findFileByName(parentFolder.id, pathname);\n    debug(`mkdir: files: ${JSON.stringify(files)}`);\n    if(files.length > 0) {\n        debug(`mkdir: The directory exists ${path}`);\n        return null;\n    }\n    const result = await Gdfs.createFile(\n        parentFolder.id, pathname, Gdfs.mimeTypeFolder);\n    if(parentFolder.id === this.getCurrentFolderId()) {\n        await this.fireCwdUpdate();\n    }\n    return result;\n};\n\n/**\n * Remove the directory but not a normal file.\n * The operation will fail, if it is not a directory nor empty.\n * @async\n * @param {string} path A pathname to operate.\n * @returns {Promise<object|null>} Returns the API response.\n *      null means it was failed.\n */\nGdfs.prototype.rmdir = async function(path) {\n    debug(`rmdir(${path})`);\n    path = path.replace(/\\/+$/, \"\");\n    const absPath = this.toAbsolutePath(new GdfsPath(path));\n    const parentFolder = await this.getFileOfPath(absPath.getPathPart());\n    debug(`rmdir: parentFolder ${JSON.stringify(parentFolder)}`);\n    if(!parentFolder || parentFolder.id == null) {\n        debug(`rmdir: The path not exists ${path}`);\n        return null;\n    }\n    const pathname = absPath.getFilename();\n    debug(`rmdir: pathname: ${pathname}`);\n    if(pathname === \"\") {\n        debug(`rmdir: The root directory cannot be removed ${path}`);\n        return null;\n    }\n    const dires = await Gdfs.findFolderByName(parentFolder.id, pathname);\n    debug(`rmdir: dires: ${JSON.stringify(dires)}`);\n    if(dires.length === 0) {\n        debug(`rmdir: The directory not exists ${path}`);\n        return null;\n    }\n    const dir = dires.shift();\n    debug(`rmdir: dir ${JSON.stringify(dir)}`);\n    debug(`rmdir: _currentPath ${JSON.stringify(this._currentPath, null, \"  \")}`);\n    if(this._currentPath.filter(parent => parent.id == dir.id).length > 0 ||\n        dir.id === await Gdfs.getActualRootFolderId())\n    {\n        debug(`rmdir: The path is a parent ${path}`);\n        return null;\n    }\n    if(dir.mimeType !== Gdfs.mimeTypeFolder) {\n        debug(`rmdir: The path is not folder ${path}`);\n        return null;\n    }\n    const params = {\n        \"q\": `parents in '${dir.id}' and trashed = false`,\n        \"fields\": \"files(id)\",\n    };\n    debug(`rmdir: params ${JSON.stringify(params)}`);\n    const children = await Gdfs.getFileList(params);\n    debug(`rmdir: children: ${JSON.stringify(children, null, \"  \")}`);\n    if(children.files.length > 0) {\n        debug(`rmdir: The folder is not empty ${path}`);\n        return null;\n    }\n    const response = await gapi.client.drive.files.delete(\n        { fileId: dir.id });\n    if(parentFolder.id === this.getCurrentFolderId()) {\n        await this.fireCwdUpdate();\n    }\n    return response.result;\n};\n\n/**\n * Delete the file but not directory.\n * This does not move the file to the trash-box.\n *\n * @async\n * @param {string} path A pathname to operate.\n * @returns {Promise<object|null>} Returns the API response.\n *      null means it was failed.\n */\nGdfs.prototype.unlink = async function(path) {\n    debug(`unlink(${path})`);\n    const absPath = this.toAbsolutePath(new GdfsPath(path));\n    const parentFolder = await this.getFileOfPath(absPath.getPathPart());\n    debug(`unlink: parentFolder ${JSON.stringify(parentFolder)}`);\n    if(!parentFolder || parentFolder.id == null) {\n        debug(`unlink: The path not exists ${path}`);\n        return null;\n    }\n    const pathname = absPath.getFilename();\n    debug(`unlink: pathname: ${pathname}`);\n    const files = await Gdfs.findFileByName(parentFolder.id, pathname);\n    debug(`unlink: files: ${JSON.stringify(files)}`);\n    if(files.length === 0) {\n        debug(`unlink: The file not exists ${path}`);\n        return null;\n    }\n    const file = files.shift();\n    if(file.mimeType === Gdfs.mimeTypeFolder) {\n        debug(`unlink: The file is a folder ${path}`);\n        return null;\n    }\n    const response = await gapi.client.drive.files.delete({ fileId: file.id });\n    const result = response.result;\n    if(parentFolder.id === this.getCurrentFolderId()) {\n        await this.fireCwdUpdate();\n    }\n    return result;\n};\n\n/**\n * Write a file.\n * @async\n * @param {string} path A pathname to operate.\n * @param {string} mimeType A mimeType of the file content.\n * @param {string} data A file content.\n * @returns {Promise<object>} The API response.\n */\nGdfs.prototype.writeFile = async function(path, mimeType, data) {\n    debug(`Gdfs#writeFile(${path},${mimeType}, ${JSON.stringify(data)})`);\n    const absPath = this.toAbsolutePath(new GdfsPath(path));\n    const parentFolder = await this.getFileOfPath(absPath.getPathPart());\n    debug(`writeFile: parentFolder: ${JSON.stringify(parentFolder)}`);\n    if(!parentFolder || parentFolder.id == null) {\n        debug(`writeFile: The path not exists ${path}`);\n        return null;\n    }\n    const filename = absPath.getFilename();\n    debug(`writeFile: filename: ${filename}`);\n    const files = await Gdfs.findFileByName(parentFolder.id, filename);\n    debug(`writeFile: files: ${JSON.stringify(files)}`);\n    if(files.length === 0) {\n        const file = await Gdfs.createFile(\n            parentFolder.id, filename, mimeType);\n        const result = await Gdfs.updateFile(file.id, mimeType, data);\n        if(parentFolder.id === this.getCurrentFolderId()) {\n            await this.fireCwdUpdate();\n        }\n        return result;\n    }\n    const file = files.shift();\n    if(file.mimeType === Gdfs.mimeTypeFolder) {\n        debug(`writeFile: The path already exists as directory ${path}`);\n        return null;\n    }\n    const result = await Gdfs.updateFile(file.id, mimeType, data);\n    if(parentFolder.id === this.getCurrentFolderId()) {\n        await this.fireCwdUpdate();\n    }\n    return result;\n};\n\nmodule.exports = Gdfs;\n","\"use strict\";\nconst debug = require(\"debug\")(\"gdfs-ui\");\ndebug(\"loading\");\nconst Gdfs = require(\"./gdfs.js\");\nconst GdfsEvent = require(\"./gdfs-event.js\");\n\n/**\n * class GdfsUi\n * @constructor\n * @param {HTMLElement} The root element that UI widget will be built.\n * @param {Gdfs} The gapi client.\n */\nfunction GdfsUi(element, opt) {\n    debug(\"Start of GdfsUi ctor\");\n    this._element = element;\n    this._gdfs = new Gdfs();\n    this._pageSize = 10;\n    this._trashed = false;\n    this._pageToken = null;\n    this._files = [];\n    this._opt = {\n        onFileListChange: () => {},\n        onCurrentDirChange: () => {},\n    };\n\n    opt = opt || {};\n    for(const key of Object.keys(this._opt)) {\n        if(key in opt) {\n            this._opt[key] = opt[key];\n        }\n    }\n\n    // events\n    this._fileListChangeEvent = new GdfsEvent(\n        this._element, \"gdfsui-filelist-change\");\n    this._currentDirChangeEvent = new GdfsEvent(\n        this._element, \"gdfsui-current-dir-change\");\n\n    this._currentDirChangeEvent.listen(\n        this._opt.onCurrentDirChange);\n    this._fileListChangeEvent.listen(\n        this._opt.onFileListChange);\n\n    this._gdfs.onCwdUpdate(async () => {\n        debug(\"Start of _gdfs.onCwdUpdate\");\n        await this.reload();\n        this._currentDirChangeEvent.fire();\n        debug(\"End of _gdfs.onCwdUpdate\");\n    });\n\n    const onSignedInStatusChange = async status => {\n        debug(\"Start of signInStatusChange\");\n        if(status) {\n            await this._gdfs.chdir(\"/\");\n        }\n        debug(\"End of signInStatusChange\");\n    };\n\n    // Listen events\n    Gdfs.signInStatusChangeEvent.listen(\n        () => onSignedInStatusChange(Gdfs.isSignedIn()));\n\n    onSignedInStatusChange(Gdfs.isSignedIn());\n    debug(\"End of GdfsUi ctor\");\n}\n\n/**\n * Returns the listing files in current directory is completed.\n * @returns {boolean} true if the listing files is completed.\n */\nGdfsUi.prototype.isPageCompleted = function() {\n    const status = this._pageToken == null;\n    return status;\n};\n\n/**\n * Get current path as full path.\n * @returns {Array<string>} The array of file ids.\n */\nGdfsUi.prototype.getCurrentPath = function() {\n    return this._gdfs._currentPath;\n};\n\n/**\n * Get files list on current page.\n * @param {number} begin a file index\n * @param {number} end a file index\n * @returns {Array<File>} the files in current page.\n */\nGdfsUi.prototype.getFiles = async function(begin, end) {\n    debug(`GdfsUi#getFiles param:{begin:${begin}, end:${end})}`);\n    debug(`_pageToken: ${this._pageToken}`);\n    if(this._pageToken == null) {\n        this._files = [];\n    }\n    while(end > this._files.length) {\n        await this.readDir();\n        this._fileListChangeEvent.fire();\n        if(this._pageToken == null) {\n            break;\n        }\n    }\n    return this._files.slice(begin, end);\n};\n\n/**\n * Read the files on current directory.\n * @async\n * @returns {Promise<undefined>}\n */\nGdfsUi.prototype.readDir = async function() {\n\n    const andConditionsOfQuerySearchClauses = [\n        `parents in '${this._gdfs.getCurrentFolderId()}'`,\n        `trashed = ${this._trashed?\"true\":\"false\"}`,\n    ];\n\n    const queryParameters = {\n        \"pageSize\": this._pageSize,\n        \"pageToken\": this._pageToken,\n        \"q\": andConditionsOfQuerySearchClauses.join(\" and \"),\n        \"fields\": \"nextPageToken, files(id, name, mimeType, webContentLink, webViewLink)\",\n    };\n\n    const result = await Gdfs.getFileList(queryParameters);\n    this._pageToken = result.nextPageToken;\n    for(const file of result.files) {\n        this._files.push(file);\n    }\n};\n\n/**\n * Reload the file list.\n * @async\n * @returns {Promise} to sync\n */\nGdfsUi.prototype.reload = async function() {\n    this._pageToken = null;\n    this._files = [];\n    await this.readDir();\n    this._fileListChangeEvent.fire();\n};\n\n/**\n * Move current directory to root, parent or one of children.\n * @param {string} folderId A destination file id to move.\n * To move to parent, \"..\" is available.\n * @returns {Promise<undefined>}\n */\nGdfsUi.prototype.chdirById = async function(folderId) {\n    await this._gdfs.chdirById(folderId);\n};\n\n/**\n * Get file resource.\n * @async\n * @param {string} fileId The file id of the target file.\n * @returns {Promise<object>} The resource object.\n */\nGdfsUi.prototype.getFileResource = async function(fileId) {\n    return await Gdfs.getFileResource({\n        \"fileId\": fileId,\n    });\n};\n\n/**\n * Upload a file.\n * @param {File} file the file to be uploaded.\n * @return {Promise<File>} an uploaded File.\n */\nGdfsUi.prototype.uploadFile = function (file) {\n    return new Promise( (resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = async () => {\n            resolve(await this.writeFile(\n                file.name, file.type, reader.result));\n        };\n        reader.onerror = event => {\n            reject(new Error([\n                \"Fail to upload. Could not read the file \",\n                `${file.name}(${event.type}).`,\n            ].join(\"\")));\n        };\n        reader.readAsArrayBuffer(file);\n    });\n};\n\n/**\n * Create or overwrite a file to current directory.\n * @param {string} filename The file name.\n * @param {string} mimeType The content type.\n * @param {any} data The file content.\n * @returns {Promise<object>} The response of update.\n */\nGdfsUi.prototype.writeFile = async function (\n    filename, mimeType, data)\n{\n    // Find same file in current directory\n    const fileIds = this._files\n        .filter(file => (file.name === filename))\n        .map( file => file.id );\n\n    if(fileIds.length == 0) {\n        //Create new file\n        const response = await Gdfs.createFile(\n            this._gdfs.getCurrentFolderId(), filename, mimeType);\n        const file = JSON.parse(response);\n        return await Gdfs.updateFile(\n            file.id, mimeType, data);\n    }\n\n    // Overwrite the file\n    return await Gdfs.updateFile(\n        fileIds[0], mimeType, data);\n};\n\nmodule.exports = GdfsUi;\n","\"use strict\";\nconst debug = require(\"debug\")(\"gdrive-fs\");\nconst Gdfs = require(\"./lib/gdfs.js\");\nGdfs.Ui = require(\"./lib/gdfs-ui.js\");\nGdfs.Path = require(\"./lib/gdfs-path.js\");\ntry {\n    const context = (Function(\"return this;\"))();\n    if(context === window) {\n        window.Gdfs = Gdfs;\n    }\n} catch(err) {\n    debug(err.message);\n}\nmodule.exports = Gdfs;\n"]}